{"version":3,"sources":["components/DiceShortCut/index.js","assets/BlankDice.svg","assets/1Dice.svg","assets/2Dice.svg","assets/3Dice.svg","assets/4Dice.svg","assets/5Dice.svg","assets/6Dice.svg","helperfunctions/types.js","helperfunctions/dice/index.js","components/KeptDice/index.js","components/DiceSet/index.js","components/DiceRoller/index.js","helperfunctions/CheckDice.js","components/YellowField/index.js","assets/BlueWhiteCombo.svg","components/BlueField/index.js","components/GreenField/index.js","components/OrangeField/index.js","components/PurpleField/index.js","components/LeftOverField/leftoverfield.js","models/playerModel.js","helperfunctions/FieldScores.js","components/ReRollField/index.js","components/PlusOneField/index.js","components/GameCard/index.js","App.js","reportWebVitals.js","index.js"],"names":["Dices","BlankDice","OneDice","TwoDice","ThreeDice","FourDice","FiveDice","SixDice","TurnState","Color","BonusType","DiceElement","props","src","dice","number","DiceShortCut","getDiceImage","alt","className","markedForPlatter","turnState","disabledClick","onClick","plusOneActivated","setPlusOneActivated","onDiceSelect","style","backgroundColor","color","KeptDice","Array","map","item","index","selectedDice","length","DiceSet","dices","availableDices","Row","Col","xs","DiceRoller","canRoll","rollNumber","Card","Body","Title","Button","disabled","onRoll","onTurnComplete","YellowChoices","BlueChoices","GreenSquares","OrangeSquares","PurpleSquares","CanSelectDice","blue","white","playerState","CanSelectYellowDice","yellowState","CanSelectBlueDice","blueState","CanSelectGreenDice","greenState","CanSelectOrangeDice","orangeState","CanSelectPurpleDice","purpleState","CanPlaceYellowDice","DoesYellowDiceMatch","i","undefined","CanPlaceBlueDice","DoesBlueDiceMatch","CanPlaceGreenDice","nextIndex","DoesGreenDiceMatch","CanPlaceOrangeDice","DoesOrangeDiceMatch","CanPlacePurpleDice","DoesPurpleDiceMatch","YellowField","Container","height","borderColor","borderWidth","sm","md","lg","xl","xxl","state","lastSelectedDice","setColorOfDice","isPlaced","onDicePlaced","propTypes","onBonusEarned","handleClick","fontSize","BlueField","BlueWhite","blueDice","whiteDice","GreenField","push","OrangeField","textAlign","fontWeight","PurpleField","LeftOverField","width","leftOverDice","leftOverSelect","PlayerState","reRollState","plusOneState","CalculateScore","tempYellowScore","console","log","YellowScore","count","n","BlueScore","GreenScore","tempOrangeScore","OrangeScore","purpleScore","tempPurpleScore","PurpleScore","ReRollField","isNextAvailable","shouldPulse","setRollNumber","prevRollNumber","setTurnState","onReRollClick","PlusOneField","onPlusOneClick","GameCard","useState","setAvailableDices","setSelectedDice","setLeftOverDice","setPlayerState","wildDice","setWildDice","setBlueDice","confirmDiceChoice","setConfirmDiceChoice","round","setRound","playerScore","setPlayerScore","thisGamesRounds","setThisGamesRounds","onDiceRoll","newDice","onDiceReject","updatedSelectedDice","updatedAvailableDices","filter","d","markDiceForPlatter","previousDie","tempSelectedDie","tempAvailableDice","newSelectedDice","newAvailableDice","toast","moveDiceToPlatter","newLeftOverDice","includes","tempArr","die","Math","floor","random","handleDicePlace","field","startNewTurn","newTurnNumber","diceReset","availableColors","bonusType","tempPlayerState","useEffect","position","autoClose","pauseOnHover","closeOnClick","background","size","icon","faBars","Modal","show","onHide","onDiceConfirm","window","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34a20b02.chunk.js","sourcesContent":["import BlankDice from \"../../assets/BlankDice.svg\"\nimport OneDice from \"../../assets/1Dice.svg\"\nimport TwoDice from \"../../assets/2Dice.svg\"\nimport ThreeDice from \"../../assets/3Dice.svg\"\nimport FourDice from \"../../assets/4Dice.svg\"\nimport FiveDice from \"../../assets/5Dice.svg\"\nimport SixDice from \"../../assets/6Dice.svg\"\n\nconst Dices = {\n    BlankDice: BlankDice,\n    OneDice: OneDice,\n    TwoDice: TwoDice,\n    ThreeDice: ThreeDice,\n    FourDice: FourDice,\n    FiveDice: FiveDice,\n    SixDice: SixDice\n}\n\nexport default Dices","export default __webpack_public_path__ + \"static/media/BlankDice.c9a23931.svg\";","export default __webpack_public_path__ + \"static/media/1Dice.4317f750.svg\";","export default __webpack_public_path__ + \"static/media/2Dice.ecbbdad5.svg\";","export default __webpack_public_path__ + \"static/media/3Dice.60f30f07.svg\";","export default __webpack_public_path__ + \"static/media/4Dice.fea982a2.svg\";","export default __webpack_public_path__ + \"static/media/5Dice.51fc3d70.svg\";","export default __webpack_public_path__ + \"static/media/6Dice.6d064eb7.svg\";","export const TurnState = {\n    RollDice: 1,\n    SelectDie: 2,\n    PlaceDie: 3,\n }; \n\nexport const Color = {\n   White: \"White\",\n   Yellow: \"Yellow\",\n   Blue: \"Blue\",\n   Green: \"Green\",\n   Orange: \"Orange\",\n   Purple: \"Purple\"\n\n}\n\nexport const BonusType = {\n   ReRoll: 1,\n   PlusOne: 2,\n   ExtraDie: 3 \n\n}","import React from \"react\";\nimport DiceShortCut from \"../../components/DiceShortCut\";\nimport {TurnState} from \"../types\";\n\n\nfunction DiceElement(props){\n\n\n    function getDiceImage(){\n        \n            switch(props.dice.number){\n                case 1: return DiceShortCut.OneDice\n                case 2: return DiceShortCut.TwoDice\n                case 3: return DiceShortCut.ThreeDice\n                case 4: return DiceShortCut.FourDice\n                case 5: return DiceShortCut.FiveDice\n                case 6: return DiceShortCut.SixDice\n                    default: return \"\"\n    \n            }\n        \n        \n    }\n\n\n    const handleClick = (dice) => {\n        if(props.plusOneActivated){\n            props.setPlusOneActivated(false)\n        }\n\n        props.onDiceSelect(dice)\n    }\n\n    return (\n        <>\n        {\n        \n        <img \n        src={getDiceImage()} \n        alt={`${props.dice.number} dice`} \n        className={`dice ${props.dice.markedForPlatter ? 'markForPlatter' : 'diceBorder'}  ${props.turnState === TurnState.SelectDie ? 'selectedPulse': \"\"} ${props.disabledClick ? 'nonSelectable' : ''}`} \n        onClick={() => handleClick(props.dice)} \n        style={{backgroundColor: props.dice.color}} />\n           }\n                \n\n        </>\n    )\n}\n\nexport default DiceElement","import React from \"react\";\nimport DiceElement from \"../../helperfunctions/dice\"\n\n\nfunction KeptDice(props){\n\n    return (\n        <>\n           \n   \n                {[...Array(3)].map((item, index) => {\n                    return (\n                        <div key={index} >\n                            {props.selectedDice.length > index\n                                ?\n                                <div className={`${props.plusOneActivated ? \"selectedPulse\": \"\"}`}>\n                                    <DiceElement\n                                    onDiceSelect={props.onDiceSelect}\n                                    plusOneActivated={props.plusOneActivated}\n                                    setPlusOneActivated={props.setPlusOneActivated} \n                                    dice={props.selectedDice[index]}/>\n                                </div>\n                                : <div className=\"gameSquare\" style={{ backgroundColor: \"white\" }}>{}</div>\n\n                            }\n                        </div>\n                      \n                    )\n\n                })\n                }\n         \n            \n\n        </>\n    )\n}\n\nexport default KeptDice\n","import React from \"react\";\nimport Dice from \"../../helperfunctions/dice\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nfunction DiceSet(props){\n\n    let dices = props.availableDices\n        \n    return (\n        <>\n           \n            <Row>\n                {dices.map((item, index) =>\n                    \n                    <Col xs={4} key={index}>\n                        <div className={`d-flex justify-content-center ${props.plusOneActivated ? 'selectedPulse' : ''}`}>\n\n                            <Dice turnState={props.turnState} onDiceSelect={props.onDiceSelect} dice={item}/>\n                        </div>\n                    \n                    </Col>\n\n                    )}\n                </Row>\n            \n        </>\n    )\n}\n\nexport default DiceSet","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceSet from \"../DiceSet\";\nimport Button from \"react-bootstrap/Button\"\nimport {TurnState} from \"../../helperfunctions/types\"\n\nfunction DiceRoller(props){\n    \n    const canRoll = () => {\n        return(props.availableDices.length > 0 && props.rollNumber < 3)\n    }\n\n    return(\n        <>\n            \n            <Card>\n                <Card.Body>\n                    <Card.Title className=\"d-flex justify-content-center\">How Clever Are You?</Card.Title>\n                        <DiceSet plusOneActivated={props.plusOneActivated} turnState={props.turnState} availableDices={props.availableDices} onDiceSelect={props.onDiceSelect} />\n                    <div className=\"d-flex justify-content-center\">\n                        <Button \n                        disabled={props.turnState !== TurnState.RollDice} \n                        className={`mt-2 ${props.turnState === TurnState.RollDice ? \"selectedPulse\" : \"\"}`} \n                        onClick={canRoll() ? props.onRoll  : props.onTurnComplete}>{canRoll() ? \"Roll Dice\"  : \"Reset Dice\"}</Button>\n                    </div>\n\n                </Card.Body>\n            </Card>\n                        \n\n        </>\n    )\n}\n\nexport default DiceRoller\n\n","import {TurnState} from \"../helperfunctions/types\"\n\nexport const YellowChoices = [3, 6, 5, \"X\", 2, 1, \"X\", 5, 1, \"X\", 2, 4, \"X\", 3, 4, 6];\nexport const BlueChoices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nexport const GreenSquares = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]\nexport const OrangeSquares = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nexport const PurpleSquares = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n\nexport const CanSelectDice = (dice, blue, white, playerState) =>{\n    return (CanSelectYellowDice(dice, playerState.yellowState)\n    || CanSelectBlueDice(dice, blue, white, playerState.blueState) \n    || CanSelectGreenDice(dice, playerState.greenState)\n    || CanSelectOrangeDice(dice, playerState.orangeState)\n    || CanSelectPurpleDice(dice, playerState.purpleState)\n    )\n}\n\nexport const CanPlaceYellowDice = (item, turnState, dice) => {\n    return (turnState === TurnState.PlaceDie \n        &&  DoesYellowDiceMatch(item, dice)\n        ) \n}\n\nconst CanSelectYellowDice = (dice, yellowState) => {\n    for(let i = 0; i < YellowChoices.length; i++){\n        if(DoesYellowDiceMatch(YellowChoices[i], dice) && yellowState[i] === undefined){\n            return true\n        }\n    }\n\n    return false\n}\n\nconst DoesYellowDiceMatch = (item, dice) => {\n    return(dice.number === item \n        && (dice.color === \"Yellow\" || dice.color === \"White\"))\n}\n\n\nexport const CanPlaceBlueDice = (item, dice, blue, white, turnState) => {\n    return (turnState === TurnState.PlaceDie \n        && DoesBlueDiceMatch(item, dice, blue, white)\n        ) \n}\n\nconst CanSelectBlueDice = (dice, blue, white, blueState) => {\n    for(let i = 0; i < BlueChoices.length; i++){\n        if(DoesBlueDiceMatch(BlueChoices[i], dice, blue, white) && blueState[i] === undefined){\n            return true\n        }\n    }\n\n    return false\n}\n\nconst DoesBlueDiceMatch = (item, dice, blue, white) => {\n//turn lines 59/60 on when testing\n    // return (white.number === item \n    //     && (dice.color === \"White\"))\n        //turn lines 62/63 off when testing\n        return (blue.number + white.number === item \n        && (dice.color === \"Blue\" || dice.color === \"White\"))\n}\n\nexport const CanPlaceGreenDice = (item, dice, turnState, greenState, index) => {\n    let nextIndex = greenState.length\n    return (turnState === TurnState.PlaceDie\n        && index === nextIndex \n        && DoesGreenDiceMatch(item, dice)\n        ) \n}\n\nconst CanSelectGreenDice = (dice, greenState) => {\n        let nextIndex = greenState.length\n        if(nextIndex < GreenSquares.length && DoesGreenDiceMatch(GreenSquares[nextIndex], dice)){\n            return true\n        }\n    \n\n    return false\n}\n\nconst DoesGreenDiceMatch = (item, dice) => {\n    return (dice.color === \"Green\" || dice.color === \"White\")\n    && (dice.number >= item)\n}\n\nexport const CanPlaceOrangeDice = (dice, turnState, orangeState, index) => {\n    let nextIndex = orangeState.length\n    return (turnState === TurnState.PlaceDie \n        && index === nextIndex \n        && DoesOrangeDiceMatch(dice)\n        ) \n}\n\nconst CanSelectOrangeDice = (dice, orangeState) => {\n        let nextIndex = orangeState.length\n        if(nextIndex < OrangeSquares.length && DoesOrangeDiceMatch(dice)){\n            return true\n        }\n    return false\n}\n\nconst DoesOrangeDiceMatch = (dice) => {\n    return (dice.color === \"Orange\" || dice.color === \"White\")\n}\n\n\nexport const CanPlacePurpleDice = (dice, turnState, purpleState, index) => {\n    let nextIndex = purpleState.length\n    return (turnState === TurnState.PlaceDie \n        && index === nextIndex \n        && DoesPurpleDiceMatch(dice, purpleState)\n        ) \n}\n\nconst CanSelectPurpleDice = (dice, purpleState) => {\n        let nextIndex = purpleState.length\n        if(nextIndex < PurpleSquares.length && DoesPurpleDiceMatch(dice, purpleState)){\n            return true\n        }\n    return false\n}\n\nconst DoesPurpleDiceMatch = (dice, purpleState) => {\n    return (dice.color === \"Purple\" || dice.color === \"White\") \n    && (purpleState.length === 0\n    || dice.number > purpleState[purpleState.length -1].number\n    || purpleState[purpleState.length -1].number === 6)\n}\n\n\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport { CanPlaceYellowDice, YellowChoices } from \"../../helperfunctions/CheckDice\"\nimport { propTypes } from \"react-bootstrap/esm/Image\";\nimport { BonusType } from \"../../helperfunctions/types\";\n\n\nfunction YellowField(props) {\n\n\n\n    const handleClick = (item, index) => {\n\n\n        if (CanPlaceYellowDice(item, props.turnState, props.lastSelectedDice)) {\n            let setColorOfDice = { ...props.lastSelectedDice };\n            setColorOfDice.color = \"Yellow\";\n            setColorOfDice.isPlaced = true;\n            props.state[index] = setColorOfDice;\n            props.onDicePlaced(props.lastSelectedDice, \"Yellow\");\n\n            //check for bonuses\n            if(props.state[0] && props.state[5] && props.state[10] && props.state[15]){\n                propTypes.onBonusEarned(BonusType.PlusOne)\n            }\n        }\n    }\n\n    return (\n\n        <Container onClick={props.onClick} className=\"mt-3\">\n            <Card style={{ height: \"20rem\", borderColor: \"#ffd900\", borderWidth: \"3px\" }}>\n                <Row>\n                    {YellowChoices.map((item, index) => {\n                        return (\n                            <Col xs={3} sm={3} md={3} lg={3} xl={3} xxl={3} key={index}>\n                                <div className=\"d-flex justify-content-center\">\n\n                                    {\n                                        props.state.length > index && props.state[index]\n                                            ? <DiceElement disabledClick={true} dice={props.state[index]} />\n                                            : <div\n                                                onClick={() => handleClick(item, index)}\n                                                style={{ fontSize: \"2rem\" }}\n                                                className={`gameSquare d-flex justify-content-center ${CanPlaceYellowDice(item, props.turnState, props.lastSelectedDice) ? \"selectedPulse yellowBorder\" : \"\"}`}>\n                                                {item}\n                                            </div>\n\n\n                                    }\n                                </div>\n\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </Card>\n        </Container>\n\n    )\n}\n\nexport default YellowField\n\n","export default __webpack_public_path__ + \"static/media/BlueWhiteCombo.e12a8c30.svg\";","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport BlueWhite from \"../../assets/BlueWhiteCombo.svg\";\nimport { CanPlaceBlueDice, BlueChoices } from \"../../helperfunctions/CheckDice\"\nimport { BonusType } from \"../../helperfunctions/types\";\n\nfunction BlueField(props) {\n\n\n    const handleClick = (item, index, props) => {\n    //when testing turn line 15 on and turn line 16 off\n        // if (CanPlaceBlueDice(item, props.lastSelectedDice, props.whiteDice, props.whiteDice, props.turnState)) {\n        if (CanPlaceBlueDice(item, props.lastSelectedDice, props.blueDice, props.whiteDice, props.turnState)) {\n            let setColorOfDice = { ...props.lastSelectedDice }\n            setColorOfDice.color = \"Blue\"\n            setColorOfDice.index = index\n            props.state[index] = setColorOfDice\n            props.onDicePlaced(props.lastSelectedDice, \"Blue\")\n\n            //check bonuses\n            if(props.state[4] && props.state[8]){\n                props.onBonusEarned(BonusType.ReRoll)\n            }else if(props.state[3] && props.state[7] && props.state[11]){\n                props.onBonusEarned(BonusType.PlusOne)\n            }\n\n        }\n    }\n\n    return (\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{ height: \"20rem\", borderColor: \"#0af\", borderWidth: \"3px\" }}>\n                    <Row>\n                        {BlueChoices.map((item, index) => {\n                            return (\n\n                                <Col xs={3} key={item}>\n                                    <div className=\"d-flex justify-content-center\">\n                                        {\n                                            item === 1\n                                                ? <img alt=\"blue and white dice only in this field\" src={BlueWhite} />\n\n\n\n                                                : props.state.length > index && props.state[index]\n                                                    ? <div className=\"gameSquare d-flex justify-content-center\" style={{ backgroundColor: \"blue\", color: \"white\", fontSize: \"2rem\" }}>{item}</div>\n                                                    : <div onClick={() => handleClick(item, index, props)} style={{ fontSize: \"2rem\" }} className={`gameSquare d-flex justify-content-center ${CanPlaceBlueDice(item, props.lastSelectedDice, props.blueDice, props.whiteDice, props.turnState) ? \"selectedPulse blueBorder\" : \"\"}`}>\n                                                        {item}\n                                                    </div>\n\n                                        }\n                                    </div>\n\n\n                                </Col>\n                            )\n                        })}\n                    </Row>\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default BlueField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport { CanPlaceGreenDice, GreenSquares } from \"../../helperfunctions/CheckDice\"\nimport { BonusType } from \"../../helperfunctions/types\";\n\nfunction GreenField(props) {\n\n    const handleClick = (item, index, props) => {\n        if (CanPlaceGreenDice(item, props.lastSelectedDice, props.turnState, props.state, index)) {\n            let setColorOfDice = { ...props.lastSelectedDice }\n            setColorOfDice.color = \"Green\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Green\")\n\n            //check for bonuses\n            if(index === 9){\n                props.onBonusEarned(BonusType.ReRoll)\n            } else if(index === 3){\n                props.onBonusEarned(BonusType.PlusOne)\n            }\n        }\n    }\n\n\n    return (\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{ borderColor: \"green\", borderWidth: \"3px\" }}>\n                    <Row>\n                        <Col xs={3} md={2} lg={1} className=\"d-flex justify-content-center\">\n                            <div className=\"d-flex justify-content-center align-items-center\">-></div>\n                        </Col>\n                        {GreenSquares.map((item, index) => {\n                            return (\n\n                                <Col className=\"d-flex justify-content-center\" xs={3} md={2} lg={1} key={index}>\n                                    {\n                                        props.state.length > index\n                                            ? <DiceElement disabledClick={true} dice={props.state[index]} />\n                                            : <div onClick={() => handleClick(item, index, props)} style={{ fontSize: \"2rem\" }} className={`gameSquare d-inline-block ${CanPlaceGreenDice(item, props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse greenBorder\" : \"\"}`}>{item}<span>≥</span></div>\n                                    }\n\n                                </Col>\n\n                            )\n                        })}\n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default GreenField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\"; \nimport {CanPlaceOrangeDice, OrangeSquares} from \"../../helperfunctions/CheckDice\"\nimport { BonusType } from \"../../helperfunctions/types\";\n\nfunction OrangeField(props){\n    \n    \n\n    const handleClick = (index) => {\n        if(CanPlaceOrangeDice(props.lastSelectedDice, props.turnState, props.state, index)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Orange\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Orange\", index)\n\n            //check for bonuses\n\n            if(index === 2){\n                props.onBonusEarned(BonusType.ReRoll)\n            } else if(index === 5){\n                props.onBonusEarned(BonusType.PlusOne)\n            }\n        }\n    }\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{borderColor: \"orange\", borderWidth: \"3px\"}}>\n                    <Row>\n                           <Col  xs={3} md={2} lg={1} className=\"d-flex justify-content-center\">\n                            <div className=\"d-flex justify-content-center align-items-center\">-></div>\n                           </Col>                    \n                            {OrangeSquares.map((item, index) => {\n                                return(\n                                   <Col xs={3} md={2} lg={1} key={index}>\n                                       <div className=\"d-flex justify-content-center\">\n\n                                       {\n                                           props.state.length > index\n                                           ? <DiceElement disabledClick={true} dice={props.state[index]}/>\n                                           : <div\n                                           onClick={() => handleClick(index)} \n                                           className={`gameSquare d-inline-block ${CanPlaceOrangeDice(props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse orangeBorder\" : \"\"}`}\n                                           style={{textAlign: \"center\", fontSize: \"2rem\", color: \"orange\", fontWeight: \"bold\"}} >\n                                                {\n                                                    index === 3 ? \"x2\"\n                                                    : index === 6 ? \"x2\"\n                                                    : index === 8 ? \"x2\"\n                                                    : index === 10 ? \"x3\" : \"\" } \n                                            </div>\n                                        }\n                                        </div>\n                                    </Col>\n                                   \n                                )\n                            })}\n                    \n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default OrangeField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport {CanPlacePurpleDice, PurpleSquares} from \"../../helperfunctions/CheckDice\"\nimport { BonusType } from \"../../helperfunctions/types\";\n\nfunction PurpleField(props){\n\n    \n\n\n    const handleClick = (index) => {\n        if(CanPlacePurpleDice(props.lastSelectedDice, props.turnState, props.state, index)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Purple\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Purple\")\n\n            //check bonuses\n\n            if(index === 2 || index === 7){\n                props.onBonusEarned(BonusType.ReRoll)\n            }else if(index === 4 || index === 10){\n                props.onBonusEarned(BonusType.PlusOne)\n            }\n        }\n    }\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{borderColor: \"purple\", borderWidth: \"3px\"}}>\n                    <Row>\n                    <Col  xs={3} md={2} lg={1} className=\"d-flex justify-content-center\">\n                            <div className=\"d-flex justify-content-center align-items-center\">-></div>\n                           </Col>\n                            {PurpleSquares.map((item, index) => {\n                                return(\n                                   <Col className=\"d-flex justify-content-center\" xs={3} md={2} lg={1} key={item}>\n                                    {\n                                        props.state.length > index\n                                        ? <DiceElement disabledClick={true} dice={props.state[index]}/>\n                                        : <div onClick={() => handleClick(index)} style={{fontSize: \"2rem\", textAlign: \"center\"}} className={`gameSquare d-inline-block ${CanPlacePurpleDice(props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse purpleBorder\" : \"\"}`}>{item === 1 ? \"\" :  <span>></span>}</div>\n                                   }\n                                        \n                                    \n                                    </Col>\n                                    \n                                   \n                                )\n                                \n                            })}\n                            \n                      \n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default PurpleField","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceShortCut from \"../../components/DiceShortCut\";\n\nfunction LeftOverField(props){\n\n    function getDiceImage(number){\n        switch(number){\n            case 1: return DiceShortCut.OneDice\n            case 2: return DiceShortCut.TwoDice\n            case 3: return DiceShortCut.ThreeDice\n            case 4: return DiceShortCut.FourDice\n            case 5: return DiceShortCut.FiveDice\n            case 6: return DiceShortCut.SixDice\n                default: return \"\"\n\n        }\n    }\n\n    const leftOverSelect = (number, color) =>{\n        if(props.plusOneActivated){\n        let dice = {\n            color: color,\n            number: number\n        }\n\n        props.onDiceSelect(dice)\n        props.setPlusOneActivated(false)\n    \n        }\n    }\n    \n\n    return (\n        <>\n\n        <Card style={{width: \"18rem\", height: \"6rem\"}}>\n\n            <Card.Body>\n                <Card.Title>\n                    Left Over Dice will go here\n                </Card.Title>\n                <div className=\"d-flex flex-row justify-content-around\" >\n                        {[...Array(5)].map((item, index) => {\n                            return (\n                                <div xs={2} key={index} >\n                                    {props.leftOverDice.length > index\n                                        ?\n                                        <img onClick={() => leftOverSelect(props.leftOverDice[index].number, props.leftOverDice[index].color)} src={getDiceImage(props.leftOverDice[index].number)} alt={`${props.leftOverDice[index].number} dice`} className={`dice-small ${props.plusOneActivated ? \"selectedPulse\": \"\"}`} style={{backgroundColor: props.leftOverDice[index].color}} /> \n                                        : <div style={{ backgroundColor: \"white\" }}>{}</div>\n\n                                    }\n\n                                </div>\n                            )\n\n                        })\n                        }\n                    </div>\n\n            </Card.Body>\n        </Card>\n\n\n           \n                \n\n        </>\n    )\n}\n\nexport default LeftOverField","const PlayerState = {\n    yellowState: [],\n    blueState: [],\n    greenState: [],\n    orangeState: [],\n    purpleState: [],\n    reRollState: [],\n    plusOneState: [],\n\n}\n\nexport default PlayerState","//the following is a map of the ies for the yellow field that needs to be met for points\n//0,4,8 (10) | 1,5,13 (14)| 2,10,14 (16)| 7,11,15 (20)\n\nconst YellowScore = (yellowState) => {\n    let tempYellowScore = 0;\n    if(\n        yellowState[0] !== undefined \n        && yellowState[4] !== undefined\n        && yellowState[8] !== undefined ){\n            tempYellowScore += 10\n        } \n    if (\n            yellowState[1] !== undefined \n            && yellowState[5] !== undefined\n            && yellowState[13] !== undefined\n        ) {\n            tempYellowScore += 14\n        } \n   if(\n            yellowState[2] !== undefined \n            && yellowState[10] !== undefined\n            && yellowState[14] !== undefined\n        ){\n            tempYellowScore += 16\n        } \n        \n    if(\n            yellowState[7] !== undefined \n            && yellowState[11] !== undefined\n            && yellowState[15] !== undefined\n        ){\n            tempYellowScore += 20\n        } \n\n    console.log(\"yellow\", tempYellowScore)\n    return tempYellowScore\n}\n\n\n\n\nconst BlueScore = (blueState) => {\n    let count = 0\n    for(let i = 0; i < blueState.length; i++){\n        if(blueState[i] !== undefined){\n            count++\n        }\n    }\n    \n    //Blue: 1:1 2:2 3:4 4:7 5:11 6:16 7:22 8:29 9:37 10:46 11:56\n    // Follows triangular sequence. Increment by 1 since we aren't starting at i 0.\n    \n    \n    if(count === 0){\n        return 0\n    } else{\n        const n = count - 1;\n        console.log(\"blue\", (n * (n +1 ) / 2) + 1)\n    return ((n * (n+1)) / 2) + 1;}\n}\n\nconst GreenScore = (greenState) => {\n    let count = 0\n    for(let i = 0; i < greenState.length; i++){\n        if(i !== undefined){\n            count++\n        }\n    }\n    \n    //Green: 1:1 2:3 3:6 4:10 5:15 6:21 7:28 8:36 9:45 10:55 11:66\n    //Follows triangular sequence.\n\n    console.log(\"green\", count * (count +1 ) / 2)\n    \n    return (count * (count +1 ) / 2)\n\n}\n\nconst OrangeScore = (orangeState) =>{\n\n    \n    let tempOrangeScore = 0;\n\n    for(let i = 0; i < orangeState.length; i++){\n        if(orangeState[i] === undefined){\n            break\n        }\n        if(i === 3 || i === 6 || i === 8){\n            tempOrangeScore += orangeState[i].number * 2\n        } else if(i === 10){\n            tempOrangeScore += orangeState[i].number * 3\n        } else {\n            tempOrangeScore += orangeState[i].number\n        }\n    }\n\n    console.log(\"orange\", tempOrangeScore)\n\n    return tempOrangeScore;\n    \n}\n\nconst PurpleScore = (purpleScore) => {\n    \n    let tempPurpleScore = 0;\n\n    for(let i = 0; i < purpleScore.length; i++){\n        if(purpleScore[i] === undefined){\n            break;\n        }\n        tempPurpleScore += purpleScore[i].number\n    }\n\n    console.log(\"purple\", tempPurpleScore)\n\n    return tempPurpleScore;\n}\n\nexport const CalculateScore = (playerState) =>{\n    return(\n        YellowScore(playerState.yellowState) + \n        BlueScore(playerState.blueState) + \n        GreenScore(playerState.greenState) + \n        OrangeScore(playerState.orangeState) + \n        PurpleScore(playerState.purpleState))\n}","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\"\nimport {TurnState} from \"../../helperfunctions/types\"\n\n\nfunction ReRollField(props) {\n\n    let reRollCircles = [1,2,3,4,5,6,7]\n\n    const isNextAvailable = (index) =>{\n        for(let i = 0; i < props.state.length; i++){\n            if(props.state[i] === true){\n                return i === index\n            }\n        }\n    }\n\n    const shouldPulse = (index) =>{\n        \n\n        if(props.turnState !== TurnState.SelectDie){\n            return false\n        }\n\n        return props.turnState === TurnState.SelectDie && isNextAvailable(index)\n       \n    }\n\n    const onReRollClick = (index) =>{\n\n        //pass in roll dice function as props from game card and use call back function here\n        //to roll the dice again.\n        \n        if(isNextAvailable(index)){\n            \n            props.setRollNumber(prevRollNumber => prevRollNumber - 1)\n\n            props.setTurnState(TurnState.RollDice)\n\n            props.state[index] = false\n        }\n\n    }\n\n    console.log(\"reRoll\", props.state)\n\n    return (\n        <>\n        <Container className=\"mt-3\">\n                <Card style={{borderColor: \"white\", borderWidth: \"3px\"}}>\n                    <Row>\n                            <Col className=\"d-flex align-items-center\">\n                                <div>ReRoll</div>\n                            </Col>       \n                            {reRollCircles.map((item, index) => {\n                                return(\n                                   <Col className=\"d-flex justify-content-center\" key={index}>\n                                       {\n                                         <div \n                                         onClick={() => onReRollClick(index)} \n                                         className={`${shouldPulse(index) ? `selectedPulse` : \"\"} gameCircle d-flex justify-content-center`}\n                                         style={props.state.length > index \n                                            && props.state[index] === true \n                                            ? {backgroundColor: \"green\"}\n                                            : props.state.length > index \n                                            && props.state[index] === false \n                                            ? {backgroundColor: \"red\"}\n                                            : {}\n                                            }\n                                         >\n        \n                                        </div>\n                                        }\n                                    </Col>\n                                   \n                                )\n                            })}\n                    \n\n                    </Row>\n\n                </Card>\n            </Container>\n\n        </>\n    )\n}\n\nexport default ReRollField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\"\nimport {TurnState} from \"../../helperfunctions/types\"\n\n\nfunction PlusOneField(props) {\n\n    let plusOneCircles = [1,2,3,4,5,6,7]\n\n    const isNextAvailable = (index) =>{\n        for(let i = 0; i < props.state.length; i++){\n            if(props.state[i] === true){\n                return i === index\n            }\n        }\n    }\n\n    const shouldPulse = (index) =>{\n        \n\n        if(props.turnState !== TurnState.RollDice && props.rollNumber !== 3){\n            return false\n        }\n        return props.turnState === TurnState.RollDice && isNextAvailable(index) && props.rollNumber === 3\n       \n    }\n\n    const onPlusOneClick = (index) =>{\n\n        if(props.rollNumber !== 3){\n            return\n        }\n        \n        if(isNextAvailable(index)){\n            props.setTurnState(TurnState.SelectDie)\n            props.setPlusOneActivated(true)\n            props.state[index] = false\n        }\n\n    }\n    \n\n    return (\n        <>\n        <Container className=\"mt-3\">\n                <Card style={{borderColor: \"white\", borderWidth: \"3px\"}}>\n                    <Row>\n                            <Col className=\"d-flex align-items-center\">\n                                <div>Plus One</div>\n                            </Col>       \n                            {plusOneCircles.map((item, index) => {\n                                return(\n                                   <Col className=\"d-flex justify-content-center\" key={index}>\n                                       {\n                                         <div \n                                         onClick={() => onPlusOneClick(index)} \n                                         className={`${shouldPulse(index) ? `selectedPulse` : \"\"} gameCircle d-flex justify-content-center`}\n                                         style={props.state.length > index \n                                            && props.state[index] === true \n                                            ? {backgroundColor: \"green\"}\n                                            : props.state.length > index \n                                            && props.state[index] === false \n                                            ? {backgroundColor: \"red\"}\n                                            : {}\n                                            }\n                                         >\n        \n                                        </div>\n                                        }\n                                    </Col>\n                                   \n                                )\n                            })}\n                    \n\n                    </Row>\n\n                </Card>\n            </Container>\n\n        </>\n    )\n}\n\nexport default PlusOneField","import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport KeptDice from \"../KeptDice\";\nimport DiceRoller from \"../DiceRoller\"\nimport YellowField from \"../YellowField\";\nimport BlueField from \"../BlueField\";\nimport GreenField from \"../GreenField\"\nimport OrangeField from \"../OrangeField\"\nimport PurpleField from \"../PurpleField\";\nimport LeftOverField from \"../LeftOverField/leftoverfield.js\";\nimport { TurnState, Color, BonusType } from \"../../helperfunctions/types\";\nimport PlayerState from \"../../models/playerModel\";\nimport { CanSelectDice } from \"../../helperfunctions/CheckDice\";\nimport { CalculateScore } from \"../../helperfunctions/FieldScores\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport ReRollField from \"../ReRollField\";\nimport PlusOneField from \"../PlusOneField\"\nimport 'react-toastify/dist/ReactToastify.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport {faBars} from \"@fortawesome/free-solid-svg-icons\"\n\n\nfunction GameCard() {\n\n    const [turnState, setTurnState] = useState(TurnState.RollDice)\n    const [availableDices, setAvailableDices] = useState([])\n    const [selectedDice, setSelectedDice] = useState([])\n    const [leftOverDice, setLeftOverDice] = useState([])\n    const [playerState, setPlayerState] = useState(PlayerState)\n    const [wildDice, setWildDice] = useState()\n    const [blueDice, setBlueDice] = useState()\n    const [confirmDiceChoice, setConfirmDiceChoice] = useState()\n    const [rollNumber, setRollNumber] = useState(0)\n    const [round, setRound] = useState(0)\n    const [playerScore, setPlayerScore] = useState(0)\n    const [thisGamesRounds, setThisGamesRounds] = useState()\n    const [plusOneActivated, setPlusOneActivated] = useState(false)\n\n    const onDiceRoll = () => {\n        if (turnState !== TurnState.RollDice) {\n            return\n        }\n\n        setRollNumber(prevRollNumber => prevRollNumber + 1)\n\n        newDice()\n        setTurnState(TurnState.SelectDie)\n    }\n\n    const onDiceConfirm = () => {\n        let updatedSelectedDice = [...selectedDice]\n        updatedSelectedDice.push(confirmDiceChoice)\n        setSelectedDice(updatedSelectedDice)\n        let updatedAvailableDices = availableDices.filter(d => d.color !== confirmDiceChoice.color)\n\n\n        setAvailableDices(updatedAvailableDices)\n\n        let actionState = 1\n\n        moveDiceToPlatter(confirmDiceChoice, updatedAvailableDices, actionState)\n\n        setTurnState(TurnState.RollDice)\n        setConfirmDiceChoice(undefined)\n    }\n\n    const onDiceReject = () => {\n        setConfirmDiceChoice(undefined)\n    }\n\n    const onDiceSelect = (dice) => {\n\n        // TODO: Consolidate duplicate code between SelectDie and PlaceDie []\n\n        console.log(\"heres your dice\", dice)\n\n        if (turnState === TurnState.SelectDie) {\n\n            if (CanSelectDice(dice, blueDice, wildDice, playerState)) {\n\n                let updatedSelectedDice = [...selectedDice]\n\n                updatedSelectedDice.push(dice)\n\n                setSelectedDice(updatedSelectedDice)\n                let updatedAvailableDices = availableDices.filter(d => d.color !== dice.color)\n\n                setAvailableDices(updatedAvailableDices)\n\n                markDiceForPlatter(dice, updatedAvailableDices)\n\n                setTurnState(TurnState.PlaceDie)\n            } else {\n                setConfirmDiceChoice(dice)\n\n            }\n\n\n        } else if (turnState === TurnState.PlaceDie) {\n            //this means the player is swapping out the last chosen die for a different die\n\n            // Undo previous selected die\n            let previousDie = selectedDice[selectedDice.length - 1]\n            let tempSelectedDie = selectedDice.filter(d => d.color !== previousDie.color)\n\n            //the selected dice can never be marked for platter\n            dice.markedForPlatter = false;\n\n\n            // Select the new die instead\n            if (CanSelectDice(dice, blueDice, wildDice, playerState)) {\n                tempSelectedDie.push(dice)\n\n\n                setSelectedDice(tempSelectedDie)\n\n                let tempAvailableDice = availableDices.filter(d => d.color !== dice.color)\n                tempAvailableDice.push(previousDie)\n\n\n                setAvailableDices(tempAvailableDice)\n\n\n                markDiceForPlatter(dice, tempAvailableDice)\n            } else {\n                setConfirmDiceChoice(dice)\n\n            }\n\n        } else if(turnState === TurnState.RollDice && !plusOneActivated){\n            return\n        }\n\n\n    }\n\n    const markDiceForPlatter = (newSelectedDice, newAvailableDice) => {\n\n        let tempAvailableDice = [...newAvailableDice]\n\n        let count = 0\n\n        for (let i = 0; i < tempAvailableDice.length; i++) {\n\n            if (newSelectedDice.number > tempAvailableDice[i].number) {\n                tempAvailableDice[i].markedForPlatter = true\n                count++\n            } else {\n                tempAvailableDice[i].markedForPlatter = false\n            }\n\n        }\n\n\n        if (count > 0) {\n            toast(\"Just be aware that the dice in red will be moved \" +\n                \"to the left over pile. You can still select these dice as \" +\n                \"your choice if you want. Just make sure to make the \" +\n                \"most clever choice.\")\n        }\n\n\n        setAvailableDices(tempAvailableDice)\n    }\n\n    const moveDiceToPlatter = (selectedDice, newAvailableDice) => {\n\n        //here I am seeing if the selected dice(s) have a number that is greater than the ones still available [X]Done\n        //if so then I am disabling the available dice which will be placed in the left over pile for other players to use. [X]Done\n        //note: the current player should be able to take a dice out of the leftover pile when they are on this step but the leftover \n        //dice should be locked once the player moves past this step. []Done\n\n\n        let newLeftOverDice = [...leftOverDice];\n\n\n        for (let i = 0; i < newAvailableDice.length; i++) {\n\n            if (selectedDice.number > newAvailableDice[i].number) {\n                newLeftOverDice.push(newAvailableDice[i]);\n            }\n\n        }\n\n\n\n        setLeftOverDice(newLeftOverDice);\n\n        let tempAvailableDice = [...newAvailableDice];\n\n        tempAvailableDice = tempAvailableDice.filter(d => !newLeftOverDice.includes(d))\n\n        setAvailableDices(tempAvailableDice)\n\n    }\n\n\n    const newDice = () => {\n        let tempArr = []\n\n        for (let i = 0; i < availableDices.length; i++) {\n            let die = availableDices[i]\n            die.number = Math.floor(Math.random() * 6) + 1\n            tempArr.push(die)\n            if (die.color === \"White\") {\n                setWildDice(die)\n            } else if (die.color === \"Blue\") {\n                setBlueDice(die)\n            }\n\n\n        }\n\n        setAvailableDices(tempArr)\n\n    }\n\n\n    const handleDicePlace = (dice, field, index) => {\n\n        setPlayerScore(CalculateScore(playerState))\n        moveDiceToPlatter(dice, availableDices)\n\n        setTurnState(TurnState.RollDice)\n\n    }\n\n    const startNewTurn = () =>{\n        const newTurnNumber = round + 1\n     \n        setRollNumber(0)\n        setRound(newTurnNumber)\n\n\n        setLeftOverDice([])\n        setSelectedDice([])\n\n        diceReset()\n\n        if(newTurnNumber === 1 || newTurnNumber === 3){\n            onBonusEarned(BonusType.ReRoll)\n        } else if(newTurnNumber === 2){\n            onBonusEarned(BonusType.PlusOne)\n        }\n\n    }\n\n    const diceReset = () => {\n    //for testing purposes turn this on and also turn testing on in the blueField and checkDice helper const: \n        // const availableColors = [Color.White, Color.White, Color.White, Color.White, Color.White, Color.White]\n\n        //when done testing turn this back on and turn testing off in blueField and checkDice helper const:\n        const availableColors = [Color.White, Color.Yellow, Color.Blue, Color.Green, Color.Orange, Color.Purple]\n        let tempArr = []\n        for (let i = 0; i < availableColors.length; i++) {\n            tempArr.push({\n                color: availableColors[i],\n                number: Math.floor(Math.random() * 6) + 1,\n            })\n        }\n        setAvailableDices(tempArr)\n    }\n\n    const resetGame = () => {\n        window.location.reload(false)\n    }\n\n    const initRounds = () => {\n        setThisGamesRounds(6)\n    }\n\n    const onBonusEarned = (bonusType, color, number) => {\n\n        if(bonusType === BonusType.ReRoll){\n            //created a nested if statement here for the toast because I want the rest of this part of the if statetment to run even if it is round 1. \n           if(round > 1){toast(`Congratulations you have earned a reroll bonus!`)}\n        let tempPlayerState = playerState\n        tempPlayerState.reRollState.push(true)\n        setPlayerState(tempPlayerState)\n        } else if(bonusType === BonusType.PlusOne){\n            toast(`Congratulations you have earned a plus one bonus!`)\n            let tempPlayerState = playerState\n            tempPlayerState.plusOneState.push(true)\n            setPlayerState(tempPlayerState)\n            \n        } else if(bonusType === BonusType.ExtraDie){\n            \n        }\n    }\n\n\n    useEffect(() => {\n        initRounds()\n        startNewTurn()\n\n    }, [])\n\n    return (\n        <>\n            <ToastContainer\n                position=\"top-right\"\n                autoClose={5000}\n                pauseOnHover\n                closeOnClick\n            />\n\n            <Card style={{ background: \"rgba(255, 255, 255, 0.25)\", width: \"100%\", height: \"auto\" }} >\n\n                <Row>\n                    <Col xs={11}>\n                        <Card.Title className=\"text-center\" style={{ color: \"white\", fontSize: \"4rem\" }}>Clever Game</Card.Title>\n                        <Card.Title style={{ color: \"white\" }}>Score: {playerScore}</Card.Title>\n                        <Card.Title style={{ color: \"white\" }}>Round: {round} / {thisGamesRounds}</Card.Title>\n                    </Col>\n                    <Col xs={1}>\n                        <FontAwesomeIcon size=\"5x\" color=\"white\" icon={faBars} />\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={12} md={12} lg={5} >\n                        <ReRollField\n                            state={playerState.reRollState}\n                            turnState={turnState}\n                            setTurnState={setTurnState}\n                            onDiceRoll={onDiceRoll}\n                            setRollNumber={setRollNumber}\n                        />\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={12} md={12} lg={5}>\n                        <PlusOneField \n                            state={playerState.plusOneState}\n                            turnState={turnState}\n                            setTurnState={setTurnState}\n                            rollNumber={rollNumber}\n                            setPlusOneActivated={setPlusOneActivated}\n                           \n                        />\n                    </Col>\n                </Row>\n\n                <Row className=\"mt-5 mb-5\">\n\n                    <Col xs={12} md={6} lg={6} className=\"d-flex flex-row\">\n\n                        <div>\n                            <KeptDice onDiceSelect={onDiceSelect} selectedDice={selectedDice} plusOneActivated={plusOneActivated} setPlusOneActivated={setPlusOneActivated} />\n                        </div>\n\n                        <DiceRoller plusOneActivated={plusOneActivated} turnState={turnState} onRoll={onDiceRoll} onTurnComplete={startNewTurn} rollNumber={rollNumber} round={round} availableDices={availableDices} onDiceSelect={onDiceSelect} />\n\n\n                    </Col>\n\n                    <Col xs={12} md={6} lg={6} className=\"d-flex justify-content-center\">\n                        <LeftOverField onDiceSelect={onDiceSelect}  leftOverDice={leftOverDice} plusOneActivated={plusOneActivated} setPlusOneActivated={setPlusOneActivated} />\n\n                    </Col>\n\n                    <Col xs={12} sm={12} md={12} lg={6} xl={6} xxl={6}>\n                        <YellowField onBonusEarned={onBonusEarned} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length - 1]} state={playerState.yellowState} onDicePlaced={handleDicePlace} />\n                    </Col>\n\n                    <Col xs={12} sm={12} md={12} lg={6} xl={6} xxl={6}>\n\n                        <BlueField onBonusEarned={onBonusEarned} whiteDice={wildDice} blueDice={blueDice} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length - 1]} state={playerState.blueState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n\n                        <GreenField onBonusEarned={onBonusEarned} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length - 1]} state={playerState.greenState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n\n                        <OrangeField onBonusEarned={onBonusEarned} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length - 1]} state={playerState.orangeState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n\n                        <PurpleField onBonusEarned={onBonusEarned} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length - 1]} state={playerState.purpleState} onDicePlaced={handleDicePlace} />\n                    </Col>\n\n                </Row>\n            </Card>\n\n            <Modal show={confirmDiceChoice !== undefined} onHide={() => onDiceReject()}>\n                {/* <Modal show={confirmDiceChoice !== undefined} onHide={() => console.log()}> */}\n                <Modal.Body>\n\n                    Do you want to select this dice? There is no place to put it\n                </Modal.Body>\n                <Button onClick={() => onDiceConfirm()}>\n                    Yes\n                </Button>\n                <Button onClick={() => onDiceReject()}>\n                    No\n                </Button>\n            </Modal>\n\n            <Modal show={round > thisGamesRounds} >\n                <Modal.Title>Game Over</Modal.Title>\n                <Modal.Body>\n                    Great Game! You scored: {playerScore}\n                </Modal.Body>\n                <Button onClick={resetGame}>Play Again!</Button>\n            </Modal>\n\n        </>\n    )\n}\n\nexport default GameCard","import './App.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport GameCard from \"./components/GameCard\"\n\n\nfunction App() {\n  return (\n    <div>\n        <GameCard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}