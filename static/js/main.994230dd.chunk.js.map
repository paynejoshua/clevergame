{"version":3,"sources":["components/DiceShortCut/index.js","assets/BlankDice.svg","assets/1Dice.svg","assets/2Dice.svg","assets/3Dice.svg","assets/4Dice.svg","assets/5Dice.svg","assets/6Dice.svg","helperfunctions/types.js","helperfunctions/dice/index.js","components/KeptDice/index.js","components/DiceSet/index.js","components/DiceRoller/index.js","helperfunctions/CheckDice.js","components/YellowField/index.js","assets/BlueWhiteCombo.svg","components/BlueField/index.js","components/GreenField/index.js","components/OrangeField/index.js","components/PurpleField/index.js","components/LeftOverField/leftoverfield.js","models/playerModel.js","helperfunctions/FieldScores.js","components/GameCard/index.js","App.js","reportWebVitals.js","index.js"],"names":["Dices","BlankDice","OneDice","TwoDice","ThreeDice","FourDice","FiveDice","SixDice","TurnState","Color","DiceElement","props","src","dice","number","DiceShortCut","getDiceImage","alt","className","markedForPlatter","turnState","disabledClick","onClick","onDiceSelect","style","backgroundColor","color","KeptDice","Row","Array","map","item","index","Col","selectedDice","length","DiceSet","dices","availableDices","DiceRoller","canRoll","rollNumber","Card","width","Body","Title","Button","disabled","onRoll","onDiceReset","YellowChoices","BlueChoices","GreenSquares","OrangeSquares","PurpleSquares","CanSelectDice","blue","white","playerState","CanSelectYellowDice","yellowState","CanSelectBlueDice","blueState","CanSelectGreenDice","greenState","CanSelectOrangeDice","orangeState","CanSelectPurpleDice","purpleState","CanPlaceYellowDice","DoesYellowDiceMatch","i","undefined","CanPlaceBlueDice","DoesBlueDiceMatch","CanPlaceGreenDice","nextIndex","DoesGreenDiceMatch","CanPlaceOrangeDice","DoesOrangeDiceMatch","CanPlacePurpleDice","DoesPurpleDiceMatch","YellowField","Container","borderColor","borderWidth","xs","sm","md","lg","xl","xxl","state","lastSelectedDice","setColorOfDice","isPlaced","onDicePlaced","handleClick","fontSize","BlueField","height","BlueWhite","blueDice","whiteDice","GreenField","push","OrangeField","textAlign","fontWeight","PurpleField","LeftOverField","leftOverDice","PlayerState","CalculateScore","tempYellowScore","console","log","YellowScore","count","n","BlueScore","GreenScore","tempOrangeScore","OrangeScore","purpleScore","tempPurpleScore","PurpleScore","GameCard","useState","setTurnState","setAvailableDices","setSelectedDice","setLeftOverDice","wildDice","setWildDice","setBlueDice","confirmDiceChoice","setConfirmDiceChoice","setRollNumber","round","setRound","playerScore","setPlayerScore","thisGamesRounds","setThisGamesRounds","onDiceReject","markDiceForPlatter","newSelectedDice","newAvailableDice","tempAvailableDice","toast","moveDiceToPlatter","newLeftOverDice","filter","d","includes","handleDicePlace","field","diceReset","prevRound","availableColors","tempArr","Math","floor","random","useEffect","position","autoClose","pauseOnHover","closeOnClick","background","prevRollNumber","die","newDice","updatedSelectedDice","updatedAvailableDices","previousDie","tempSelectedDie","Modal","show","onHide","onDiceConfirm","window","location","reload","App","Jumbotron","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAkBeA,EAVD,CACVC,UCTW,IAA0B,sCDUrCC,QEVW,IAA0B,kCFWrCC,QGXW,IAA0B,kCHYrCC,UIZW,IAA0B,kCJarCC,SKbW,IAA0B,kCLcrCC,SMdW,IAA0B,kCNerCC,QOfW,IAA0B,mCCA5BC,EACC,EADDA,EAEE,EAFFA,EAGC,EAGDC,EACH,QADGA,EAEF,SAFEA,EAGJ,OAHIA,EAIH,QAJGA,EAKF,SALEA,EAMF,S,OC4BIC,MAnCf,SAAqBC,GAkBjB,OACI,mCAGA,qBACAC,IArBJ,WAEQ,OAAOD,EAAME,KAAKC,QACd,KAAK,EAAG,OAAOC,EAAab,QAC5B,KAAK,EAAG,OAAOa,EAAaZ,QAC5B,KAAK,EAAG,OAAOY,EAAaX,UAC5B,KAAK,EAAG,OAAOW,EAAaV,SAC5B,KAAK,EAAG,OAAOU,EAAaT,SAC5B,KAAK,EAAG,OAAOS,EAAaR,QACxB,QAAS,MAAO,IAYvBS,GACLC,IAAG,UAAKN,EAAME,KAAKC,OAAhB,SACHI,UAAS,eAAUP,EAAME,KAAKM,iBAAmB,iBAAmB,aAA3D,aAA4ER,EAAMS,YAAcZ,EAAsB,gBAAkB,GAAxI,YAA8IG,EAAMU,cAAgB,gBAAkB,IAC/LC,QAAS,kBAAMX,EAAMY,aAAaZ,EAAME,OACxCW,MAAO,CAACC,gBAAiBd,EAAME,KAAKa,YCK7BC,MA9Bf,SAAkBhB,GAId,OACI,mCAEI,cAACiB,EAAA,EAAD,UACK,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAMC,GACtB,OACI,cAACC,EAAA,EAAD,UACKtB,EAAMuB,aAAaC,OAASH,EAEzB,cAAC,EAAD,CAAanB,KAAMF,EAAMuB,aAAaF,KACpC,qBAAKd,UAAU,aAAaM,MAAO,CAAEC,gBAAiB,YAJtDO,WCUnBI,MArBf,SAAiBzB,GAEb,IAAI0B,EAAQ1B,EAAM2B,eAElB,OACI,mCAEI,cAACV,EAAA,EAAD,UACKS,EAAMP,KAAI,SAACC,EAAMC,GAAP,OAEP,cAACC,EAAA,EAAD,UACI,cAAC,EAAD,CAAMb,UAAWT,EAAMS,UAAWG,aAAcZ,EAAMY,aAAcV,KAAMkB,KADpEC,WCkBfO,MA5Bf,SAAoB5B,GAEhB,IAAM6B,EAAU,WACZ,OAAO7B,EAAM2B,eAAeH,OAAS,GAAKxB,EAAM8B,WAAa,GAGjE,OACI,mCAEI,cAACC,EAAA,EAAD,CAAMlB,MAAO,CAACmB,MAAO,SAArB,SACI,eAACD,EAAA,EAAKE,KAAN,WACI,cAACF,EAAA,EAAKG,MAAN,CAAY3B,UAAU,gCAAtB,iCACI,cAAC,EAAD,CAASE,UAAWT,EAAMS,UAAWkB,eAAgB3B,EAAM2B,eAAgBf,aAAcZ,EAAMY,eACnG,qBAAKL,UAAU,gCAAf,SACI,cAAC4B,EAAA,EAAD,CACAC,SAAUpC,EAAMS,YAAcZ,EAC9BU,UAAS,eAAUP,EAAMS,YAAcZ,EAAqB,gBAAkB,IAC9Ec,QAASkB,IAAY7B,EAAMqC,OAAUrC,EAAMsC,YAH3C,SAGyDT,IAAY,YAAe,yB,QCrB/FU,EAAgB,CAAC,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,GACtEC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAClDC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9CC,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAChDC,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAGhDC,EAAgB,SAAC1C,EAAM2C,EAAMC,EAAOC,GAC7C,OAAQC,EAAoB9C,EAAM6C,EAAYE,cAC3CC,EAAkBhD,EAAM2C,EAAMC,EAAOC,EAAYI,YACjDC,EAAmBlD,EAAM6C,EAAYM,aACrCC,EAAoBpD,EAAM6C,EAAYQ,cACtCC,EAAoBtD,EAAM6C,EAAYU,cAIhCC,EAAqB,SAACtC,EAAMX,EAAWP,GAChD,OAAQO,IAAcZ,GACd8D,EAAoBvC,EAAMlB,IAIhC8C,EAAsB,SAAC9C,EAAM+C,GAC/B,IAAI,IAAIW,EAAI,EAAGA,EAAIrB,EAAcf,OAAQoC,IACrC,GAAGD,EAAoBpB,EAAcqB,GAAI1D,SAA4B2D,IAAnBZ,EAAYW,GAC1D,OAAO,EAIf,OAAO,GAGLD,EAAsB,SAACvC,EAAMlB,GAC/B,OAAOA,EAAKC,SAAWiB,IACA,WAAflB,EAAKa,OAAqC,UAAfb,EAAKa,QAI/B+C,EAAmB,SAAC1C,EAAMlB,EAAM2C,EAAMC,EAAOrC,GACtD,OAAQA,IAAcZ,GACfkE,EAAkB3C,EAAMlB,EAAM2C,EAAMC,IAIzCI,EAAoB,SAAChD,EAAM2C,EAAMC,EAAOK,GAC1C,IAAI,IAAIS,EAAI,EAAGA,EAAIpB,EAAYhB,OAAQoC,IACnC,GAAGG,EAAkBvB,EAAYoB,GAAI1D,EAAM2C,EAAMC,SAA2Be,IAAjBV,EAAUS,GACjE,OAAO,EAIf,OAAO,GAGLG,EAAoB,SAAC3C,EAAMlB,EAAM2C,EAAMC,GACzC,OAAQD,EAAK1C,OAAS2C,EAAM3C,SAAWiB,IAChB,SAAflB,EAAKa,OAAmC,UAAfb,EAAKa,QAG7BiD,EAAoB,SAAC5C,EAAMlB,EAAMO,EAAW4C,EAAYhC,GACjE,IAAI4C,EAAYZ,EAAW7B,OAC3B,OAAQf,IAAcZ,GACfwB,IAAU4C,GACVC,EAAmB9C,EAAMlB,IAI9BkD,EAAqB,SAAClD,EAAMmD,GAC1B,IAAIY,EAAYZ,EAAW7B,OAC3B,SAAGyC,EAAYxB,EAAajB,QAAU0C,EAAmBzB,EAAawB,GAAY/D,KAQpFgE,EAAqB,SAAC9C,EAAMlB,GAC9B,OAAuB,UAAfA,EAAKa,OAAoC,UAAfb,EAAKa,QACnCb,EAAKC,QAAUiB,GAGV+C,EAAqB,SAACjE,EAAMO,EAAW8C,EAAalC,GAC7D,IAAI4C,EAAYV,EAAY/B,OAC5B,OAAQf,IAAcZ,GACfwB,IAAU4C,GACVG,EAAoBlE,IAIzBoD,EAAsB,SAACpD,EAAMqD,GAE3B,SADgBA,EAAY/B,OACbkB,EAAclB,QAAU4C,EAAoBlE,KAM7DkE,EAAsB,SAAClE,GACzB,MAAuB,WAAfA,EAAKa,OAAqC,UAAfb,EAAKa,OAI/BsD,EAAqB,SAACnE,EAAMO,EAAWgD,EAAapC,GAC7D,IAAI4C,EAAYR,EAAYjC,OAC5B,OAAQf,IAAcZ,GACfwB,IAAU4C,GACVK,EAAoBpE,EAAMuD,IAI/BD,EAAsB,SAACtD,EAAMuD,GAE3B,SADgBA,EAAYjC,OACbmB,EAAcnB,QAAU8C,EAAoBpE,EAAMuD,KAMnEa,EAAsB,SAACpE,EAAMuD,GAC/B,OAAuB,WAAfvD,EAAKa,OAAqC,UAAfb,EAAKa,SACb,IAAvB0C,EAAYjC,QACbtB,EAAKC,OAASsD,EAAYA,EAAYjC,OAAQ,GAAGrB,QACH,IAA9CsD,EAAYA,EAAYjC,OAAQ,GAAGrB,SCpE3BoE,MAhDf,SAAqBvE,GAgBjB,OAEQ,cAACwE,EAAA,EAAD,CAAW7D,QAASX,EAAMW,QAASJ,UAAU,OAA7C,SACI,cAACwB,EAAA,EAAD,CAAMlB,MAAO,CAACmB,MAAO,QAASyC,YAAa,UAAWC,YAAa,OAAnE,SACI,cAACzD,EAAA,EAAD,UACKsB,EAAcpB,KAAI,SAACC,EAAMC,GACtB,OACA,cAACC,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAA7C,SAGIhF,EAAMiF,MAAMzD,OAASH,GAASrB,EAAMiF,MAAM5D,GACvC,cAAC,EAAD,CAAaX,eAAe,EAAMR,KAAMF,EAAMiF,MAAM5D,KACrD,qBACFV,QAAS,kBAzBjB,SAACS,EAAMC,GAGvB,GAAGqC,EAAmBtC,EAAMpB,EAAMS,UAAWT,EAAMkF,kBAAkB,CACjE,IAAIC,EAAc,eAAOnF,EAAMkF,kBAC/BC,EAAepE,MAAQ,SACvBoE,EAAeC,UAAW,EAC1BpF,EAAMiF,MAAM5D,GAAS8D,EACrBnF,EAAMqF,aAAarF,EAAMkF,iBAAkB,WAiBRI,CAAYlE,EAAMC,IACjCR,MAAO,CAAC0E,SAAU,QAClBhF,UAAS,mDAA8CmD,EAAmBtC,EAAMpB,EAAMS,UAAWT,EAAMkF,kBAAoB,6BAA+B,IAHxJ,SAID9D,KATgDC,aChClE,OAA0B,2CCuD1BmE,OA/Cf,SAAmBxF,GAcf,OACI,mCACI,cAACwE,EAAA,EAAD,CAAWjE,UAAU,OAArB,SACI,cAACwB,EAAA,EAAD,CAAMlB,MAAO,CAACmB,MAAO,QAASyD,OAAQ,QAAShB,YAAa,OAAQC,YAAa,OAAjF,SACI,cAACzD,EAAA,EAAD,UACKuB,EAAYrB,KAAI,SAACC,EAAMC,GACpB,OACA,cAACC,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAA7C,SAEa,IAAT5D,EACE,qBAAKd,IAAI,yCAAyCL,IAAKyF,KAItD1F,EAAMiF,MAAMzD,OAASH,GAASrB,EAAMiF,MAAM5D,GAC1C,qBAAKd,UAAU,2CAA2CM,MAAO,CAACC,gBAAiB,OAAQC,MAAO,QAASwE,SAAS,QAApH,SAA8HnE,IAC/H,qBAAKT,QAAS,kBA3BxB,SAACS,EAAMC,EAAOrB,GAE9B,GAAG8D,EAAiB1C,EAAMpB,EAAMkF,iBAAkBlF,EAAM2F,SAAU3F,EAAM4F,UAAW5F,EAAMS,WAAW,CAChG,IAAI0E,EAAc,eAAOnF,EAAMkF,kBAC/BC,EAAepE,MAAQ,OACvBoE,EAAe9D,MAAQA,EACvBrB,EAAMiF,MAAM5D,GAAS8D,EACrBnF,EAAMqF,aAAarF,EAAMkF,iBAAkB,SAoBDI,CAAYlE,EAAMC,EAAOrB,IAAQa,MAAO,CAAC0E,SAAU,QAAShF,UAAS,mDAA8CuD,EAAiB1C,EAAMpB,EAAMkF,iBAAkBlF,EAAM2F,SAAU3F,EAAM4F,UAAW5F,EAAMS,WAAa,2BAA6B,IAAvQ,SACDW,KAVgDA,eCoBlEyE,OAzCf,SAAoB7F,GAYhB,OACI,mCACI,cAACwE,EAAA,EAAD,CAAWjE,UAAU,OAArB,SACI,cAACwB,EAAA,EAAD,CAAMlB,MAAO,CAAC4D,YAAa,QAASC,YAAa,OAAjD,SACI,cAACzD,EAAA,EAAD,UACI,cAACK,EAAA,EAAD,CAAKf,UAAU,gCAAf,SACKkC,EAAatB,KAAI,SAACC,EAAMC,GACrB,OACG,8BAEKrB,EAAMiF,MAAMzD,OAASH,EACnB,cAAC,EAAD,CAAaX,eAAe,EAAMR,KAAMF,EAAMiF,MAAM5D,KACxD,sBAAKV,QAAS,kBAtB5B,SAACS,EAAMC,EAAOrB,GAC9B,GAAGgE,EAAkB5C,EAAMpB,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAO,CACpF,IAAI8D,EAAc,eAAOnF,EAAMkF,kBAC/BC,EAAepE,MAAQ,QACvBf,EAAMiF,MAAMa,KAAKX,GACjBnF,EAAMqF,aAAarF,EAAMkF,iBAAkB,UAiBGI,CAAYlE,EAAMC,EAAOrB,IAAQa,MAAO,CAAC0E,SAAU,QAAShF,UAAS,oCAA+ByD,EAAkB5C,EAAMpB,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAS,4BAA8B,IAA7O,UAAoPD,EAAK,8CAJlPC,iBC8B9B0E,OAlDf,SAAqB/F,GAajB,OACI,mCACI,cAACwE,EAAA,EAAD,CAAWjE,UAAU,OAArB,SACI,cAACwB,EAAA,EAAD,CAAMlB,MAAO,CAAC4D,YAAa,SAAUC,YAAa,OAAlD,SACI,cAACzD,EAAA,EAAD,UACI,cAACK,EAAA,EAAD,CAAKf,UAAU,gCAAf,SACKmC,EAAcvB,KAAI,SAACC,EAAMC,GACtB,OACG,8BAEKrB,EAAMiF,MAAMzD,OAASH,EACnB,cAAC,EAAD,CAAaX,eAAe,EAAMR,KAAMF,EAAMiF,MAAM5D,KACpD,qBACEV,QAAS,kBAtB7B,SAACU,GACjB,GAAG8C,EAAmBnE,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAO,CAC/E,IAAI8D,EAAc,eAAOnF,EAAMkF,kBAC/BC,EAAepE,MAAQ,SACvBf,EAAMiF,MAAMa,KAAKX,GACjBnF,EAAMqF,aAAarF,EAAMkF,iBAAkB,SAAU7D,IAiBNiE,CAAYjE,IAC3Bd,UAAS,oCAA+B4D,EAAmBnE,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAS,6BAA+B,IACzJR,MAAO,CAACmF,UAAW,SAAUT,SAAU,OAAQxE,MAAO,SAAUkF,WAAY,QAH9E,SAKgB,IAAV5E,GACY,IAAVA,GACU,IAAVA,EAFY,KAGF,KAAVA,EAAe,KAAO,MAZ3BA,iBC0B9B6E,OA/Cf,SAAqBlG,GAcjB,OACI,mCACI,cAACwE,EAAA,EAAD,CAAWjE,UAAU,OAArB,SACI,cAACwB,EAAA,EAAD,CAAMlB,MAAO,CAAC4D,YAAa,SAAUC,YAAa,OAAlD,SACI,cAACzD,EAAA,EAAD,UACI,cAACK,EAAA,EAAD,CAAKf,UAAU,gCAAf,SACKoC,EAAcxB,KAAI,SAACC,EAAMC,GACtB,OACG,8BAEKrB,EAAMiF,MAAMzD,OAASH,EACnB,cAAC,EAAD,CAAaX,eAAe,EAAMR,KAAMF,EAAMiF,MAAM5D,KACpD,qBAAKV,QAAS,kBArBhC,SAACU,GACjB,GAAGgD,EAAmBrE,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAO,CAC/E,IAAI8D,EAAc,eAAOnF,EAAMkF,kBAC/BC,EAAepE,MAAQ,SACvBf,EAAMiF,MAAMa,KAAKX,GACjBnF,EAAMqF,aAAarF,EAAMkF,iBAAkB,WAgBOI,CAAYjE,IAAQR,MAAO,CAAC0E,SAAU,OAAQS,UAAW,UAAWzF,UAAS,oCAA+B8D,EAAmBrE,EAAMkF,iBAAkBlF,EAAMS,UAAWT,EAAMiF,MAAO5D,GAAS,6BAA+B,IAAjP,SAAiQ,IAATD,EAAa,GAAM,wCAJxQA,iBC8B9B+E,OAtDf,SAAuBnG,GAEnB,SAASK,EAAaF,GAClB,OAAOA,GACH,KAAK,EAAG,OAAOC,EAAab,QAC5B,KAAK,EAAG,OAAOa,EAAaZ,QAC5B,KAAK,EAAG,OAAOY,EAAaX,UAC5B,KAAK,EAAG,OAAOW,EAAaV,SAC5B,KAAK,EAAG,OAAOU,EAAaT,SAC5B,KAAK,EAAG,OAAOS,EAAaR,QACxB,QAAS,MAAO,IAM5B,OACI,mCAEA,cAACmC,EAAA,EAAD,CAAMlB,MAAO,CAACmB,MAAO,SAArB,SAEI,eAACD,EAAA,EAAKE,KAAN,WACI,cAACF,EAAA,EAAKG,MAAN,0BAGA,cAACjB,EAAA,EAAD,UACS,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAMC,GACtB,OACI,cAACC,EAAA,EAAD,UACKtB,EAAMoG,aAAa5E,OAASH,EAEzB,qBAAKpB,IAAKI,EAAaL,EAAMoG,aAAa/E,GAAOlB,QAASG,IAAG,UAAKN,EAAMoG,aAAa/E,GAAOlB,OAA/B,SAA8CI,UAAU,OAAOM,MAAO,CAACC,gBAAiBd,EAAMoG,aAAa/E,GAAON,SAC7K,qBAAKR,UAAU,aAAaM,MAAO,CAAEC,gBAAiB,YAJtDO,gBCzB3BgF,GATK,CAChBpD,YAAa,GACbE,UAAW,GACXE,WAAY,GACZE,YAAa,GACbE,YAAa,ICmHJ6C,GAAiB,SAACvD,GAC3B,OApHgB,SAACE,GACjB,IAAIsD,EAAkB,EA+BtB,YA7BuB1C,IAAnBZ,EAAY,SACUY,IAAnBZ,EAAY,SACOY,IAAnBZ,EAAY,KACXsD,GAAmB,SAGA1C,IAAnBZ,EAAY,SACUY,IAAnBZ,EAAY,SACQY,IAApBZ,EAAY,MAEfsD,GAAmB,SAGA1C,IAAnBZ,EAAY,SACWY,IAApBZ,EAAY,UACQY,IAApBZ,EAAY,MAEfsD,GAAmB,SAIA1C,IAAnBZ,EAAY,SACWY,IAApBZ,EAAY,UACQY,IAApBZ,EAAY,MAEfsD,GAAmB,IAG3BC,QAAQC,IAAI,SAAUF,GACfA,EAqFHG,CAAY3D,EAAYE,aA/Ed,SAACE,GAEf,IADA,IAAIwD,EAAQ,EACJ/C,EAAI,EAAGA,EAAIT,EAAU3B,OAAQoC,SACbC,IAAjBV,EAAUS,IACT+C,IAQR,GAAa,IAAVA,EACC,OAAO,EAEP,IAAMC,EAAID,EAAQ,EAEtB,OADIH,QAAQC,IAAI,OAASG,GAAKA,EAAG,GAAM,EAAK,GACnCA,GAAKA,EAAE,GAAM,EAAK,EA+DvBC,CAAU9D,EAAYI,WA5DX,SAACE,GAEhB,IADA,IAAIsD,EAAQ,EACJ/C,EAAI,EAAGA,EAAIP,EAAW7B,OAAQoC,SACzBC,IAAND,GACC+C,IASR,OAFAH,QAAQC,IAAI,QAASE,GAASA,EAAO,GAAM,GAEnCA,GAASA,EAAO,GAAM,EAgD1BG,CAAW/D,EAAYM,YA5CX,SAACE,GAKjB,IAFA,IAAIwD,EAAkB,EAEdnD,EAAI,EAAGA,EAAIL,EAAY/B,aACLqC,IAAnBN,EAAYK,GADoBA,IAK/BmD,GADK,IAANnD,GAAiB,IAANA,GAAiB,IAANA,EACsB,EAAxBL,EAAYK,GAAGzD,OACtB,KAANyD,EACqC,EAAxBL,EAAYK,GAAGzD,OAEfoD,EAAYK,GAAGzD,OAM1C,OAFAqG,QAAQC,IAAI,SAAUM,GAEfA,EAyBHC,CAAYjE,EAAYQ,aArBZ,SAAC0D,GAIjB,IAFA,IAAIC,EAAkB,EAEdtD,EAAI,EAAGA,EAAIqD,EAAYzF,aACLqC,IAAnBoD,EAAYrD,GADoBA,IAInCsD,GAAmBD,EAAYrD,GAAGzD,OAKtC,OAFAqG,QAAQC,IAAI,SAAUS,GAEfA,EASHC,CAAYpE,EAAYU,c,eCwNjB2D,OA/Tf,WAEI,MAAkCC,mBAASxH,GAA3C,mBAAOY,EAAP,KAAkB6G,EAAlB,KACA,EAA4CD,mBAAS,IAArD,mBAAO1F,EAAP,KAAuB4F,EAAvB,KACA,EAAwCF,mBAAS,IAAjD,mBAAO9F,EAAP,KAAqBiG,EAArB,KACA,EAAwCH,mBAAS,IAAjD,mBAAOjB,EAAP,KAAqBqB,EAArB,KACA,EAAsCJ,mBAAShB,IAA/C,mBAAOtD,EAAP,KACA,GADA,KACgCsE,sBAAhC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgCN,qBAAhC,mBAAO1B,EAAP,KAAiBiC,EAAjB,KACA,EAAkDP,qBAAlD,mBAAOQ,EAAP,KAA0BC,EAA1B,KACA,GAAoCT,mBAAS,GAA7C,qBAAOvF,GAAP,MAAmBiG,GAAnB,MACA,GAA0BV,mBAAS,GAAnC,qBAAOW,GAAP,MAAcC,GAAd,MACA,GAAsCZ,mBAAS,GAA/C,qBAAOa,GAAP,MAAoBC,GAApB,MACA,GAA8Cd,qBAA9C,qBAAOe,GAAP,MAAwBC,GAAxB,MAgCA,SAASC,KACLR,OAAqBjE,GAiEzB,SAAS0E,GAAmBC,EAAiBC,GAMzC,IAJA,IAAIC,EAAiB,YAAOD,GAExB9B,EAAQ,EAEJ/C,EAAI,EAAGA,EAAI8E,EAAkBlH,OAAQoC,IAEtC4E,EAAgBrI,OAASuI,EAAkB9E,GAAGzD,QAC7CuI,EAAkB9E,GAAGpD,kBAAmB,EACxCmG,KAEA+B,EAAkB9E,GAAGpD,kBAAmB,EAM7CmG,EAAQ,GACPgC,aAAM,sLAOVpB,EAAkBmB,GAGtB,SAASE,GAAkBrH,EAAckH,GAWrC,IAHA,IAAII,EAAe,YAAOzC,GAGlBxC,EAAI,EAAGA,EAAI6E,EAAiBjH,OAAQoC,IAEjCrC,EAAapB,OAASsI,EAAiB7E,GAAGzD,QACzC0I,EAAgB/C,KAAK2C,EAAiB7E,IAOlD6D,EAAgBoB,GAEhB,IAAIH,EAAiB,YAAOD,GAE5BC,EAAoBA,EAAkBI,QAAO,SAAAC,GAAC,OAAKF,EAAgBG,SAASD,MAE5ExB,EAAkBmB,GA0BtB,IAAMO,GAAkB,SAAC/I,EAAMgJ,EAAO7H,GAElC8G,GAAe7B,GAAevD,IAC9B6F,GAAkB1I,EAAMyB,GAExB2F,EAAazH,IAKXsJ,GAAY,WAGdpB,GAAc,GACdE,IAAS,SAAAmB,GAAS,OAAIA,EAAY,KAGlC3B,EAAgB,IAChBD,EAAgB,IAIhB,IAFA,IAAM6B,EAAkB,CAACvJ,EAAaA,EAAcA,EAAYA,EAAaA,EAAcA,GACvFwJ,EAAU,GACN1F,EAAI,EAAGA,EAAIyF,EAAgB7H,OAAQoC,IACvC0F,EAAQxD,KAAK,CACT/E,MAAOsI,EAAgBzF,GACvBzD,OAAQoJ,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IAGhDlC,EAAkB+B,IAiBtB,OANAI,qBAAU,WAHNrB,GAAmB,GAKnBc,OAED,IAGC,qCACI,cAAC,KAAD,CACIQ,SAAS,YACTC,UAAW,IACXC,cAAY,EACZC,cAAY,IAEhB,cAACtF,EAAA,EAAD,CAAWjE,UAAU,qCAArB,SACI,eAACwB,EAAA,EAAD,CAAMlB,MAAO,CAACkJ,WAAY,6BAA1B,UAEA,cAAC9I,EAAA,EAAD,UACI,eAACK,EAAA,EAAD,WACI,eAACS,EAAA,EAAKG,MAAN,CAAYrB,MAAO,CAACE,MAAO,SAA3B,oBAA6CmH,MAC7C,eAACnG,EAAA,EAAKG,MAAN,CAAYrB,MAAO,CAACE,MAAO,SAA3B,oBAA6CiH,GAA7C,MAAuDI,WAI/D,eAACnH,EAAA,EAAD,CAAKV,UAAU,YAAf,UAEI,eAACe,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAAGzE,UAAU,gCAA1D,UACY,cAAC,EAAD,CAAUgB,aAAcA,IACxB,cAAC,EAAD,CAAYd,UAAWA,EAAW4B,OAnP9D,WACO5B,IAAcZ,IAIjBkI,IAAc,SAAAiC,GAAc,OAAIA,EAAiB,KAsJrD,WAGI,IAFA,IAAIV,EAAU,GAEN1F,EAAE,EAAGA,EAAIjC,EAAeH,OAAQoC,IAAI,CACxC,IAAIqG,EAAMtI,EAAeiC,GACzBqG,EAAI9J,OAASoJ,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC7CH,EAAQxD,KAAKmE,GACI,UAAdA,EAAIlJ,MACH4G,EAAYsC,GACQ,SAAdA,EAAIlJ,OACV6G,EAAYqC,GAMpB1C,EAAkB+B,GApKlBY,GACA5C,EAAazH,KA2OiEyC,YAAa6G,GAAWrH,WAAYA,GAAYkG,MAAOA,GAAOrG,eAAgBA,EAAgBf,aAnNhL,SAAsBV,GAIlB,GAAGO,IAAcZ,EAEb,GAAG+C,EAAc1C,EAAMyF,EAAU+B,EAAU3E,GAAa,CAEpD,IAAIoH,EAAmB,YAAO5I,GAE9B4I,EAAoBrE,KAAK5F,GAEzBsH,EAAgB2C,GAChB,IAAIC,EAAwBzI,EAAemH,QAAO,SAAAC,GAAC,OAAIA,EAAEhI,QAAUb,EAAKa,SAExEwG,EAAkB6C,GAElB7B,GAAmBrI,EAAMkK,GAEzB9C,EAAazH,QAEbiI,EAAqB5H,QAKtB,GAAIO,IAAcZ,EAAmB,CAIpC,IAAIwK,EAAc9I,EAAaA,EAAaC,OAAS,GACjD8I,EAAkB/I,EAAauH,QAAO,SAAAC,GAAC,OAAIA,EAAEhI,QAAUsJ,EAAYtJ,SAOvE,GAJAb,EAAKM,kBAAmB,EAIrBoC,EAAc1C,EAAMyF,EAAU+B,EAAU3E,GAAa,CACpDuH,EAAgBxE,KAAK5F,GAGrBsH,EAAgB8C,GAEhB,IAAI5B,EAAoB/G,EAAemH,QAAO,SAAAC,GAAC,OAAIA,EAAEhI,QAAUb,EAAKa,SACpE2H,EAAkB5C,KAAKuE,GAGvB9C,EAAkBmB,GAGlBH,GAAmBrI,EAAMwI,QAEzBZ,EAAqB5H,UAkKrB,cAACoB,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAAGzE,UAAU,gCAA1D,SACY,cAAC,GAAD,CAAe6F,aAAcA,MAGzC,cAAC9E,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAA7C,SACY,cAAC,EAAD,CAAavE,UAAWA,EAAWyE,iBAAkB3D,EAAaA,EAAaC,OAAQ,GAAIyD,MAAOlC,EAAYE,YAAaoC,aAAc4D,OAGrJ,cAAC3H,EAAA,EAAD,CAAKqD,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAK,EAA7C,SAEY,cAAC,GAAD,CAAWY,UAAW8B,EAAU/B,SAAUA,EAAUlF,UAAWA,EAAWyE,iBAAkB3D,EAAaA,EAAaC,OAAQ,GAAIyD,MAAOlC,EAAYI,UAAWkC,aAAc4D,OAE1L,cAAC3H,EAAA,EAAD,CAAKqD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,IAAK,GAAlD,SAEY,cAAC,GAAD,CAAYvE,UAAWA,EAAWyE,iBAAkB3D,EAAaA,EAAaC,OAAQ,GAAIyD,MAAOlC,EAAYM,WAAYgC,aAAc4D,OAEnJ,cAAC3H,EAAA,EAAD,CAAKqD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,IAAK,GAAlD,SAEY,cAAC,GAAD,CAAavE,UAAWA,EAAWyE,iBAAkB3D,EAAaA,EAAaC,OAAQ,GAAIyD,MAAOlC,EAAYQ,YAAa8B,aAAc4D,OAErJ,cAAC3H,EAAA,EAAD,CAAKqD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,IAAK,GAAlD,SAEY,cAAC,GAAD,CAAavE,UAAWA,EAAWyE,iBAAkB3D,EAAaA,EAAaC,OAAQ,GAAIyD,MAAOlC,EAAYU,YAAa4B,aAAc4D,eAO7J,eAACsB,EAAA,EAAD,CAAOC,UAA4B3G,IAAtBgE,EAAiC4C,OAAQ,kBAAMnC,MAA5D,UAEI,cAACiC,EAAA,EAAMtI,KAAP,2EAIA,cAACE,EAAA,EAAD,CAAQxB,QAAS,kBA/Q7B,WACI,IAAIwJ,EAAmB,YAAO5I,GAC9B4I,EAAoBrE,KAAK+B,GACzBL,EAAgB2C,GAChB,IAAIC,EAAwBzI,EAAemH,QAAO,SAAAC,GAAC,OAAIA,EAAEhI,QAAU8G,EAAkB9G,SAGrFwG,EAAkB6C,GAIlBxB,GAAkBf,EAAmBuC,GAErC9C,EAAazH,GACbiI,OAAqBjE,GAiQU6G,IAAvB,iBAGA,cAACvI,EAAA,EAAD,CAAQxB,QAAS,kBAAM2H,MAAvB,mBAKJ,eAACiC,EAAA,EAAD,CAAOC,KAAMxC,GAAQI,GAArB,UACQ,cAACmC,EAAA,EAAMrI,MAAP,wBACJ,eAACqI,EAAA,EAAMtI,KAAP,sCAC6BiG,MAE7B,cAAC/F,EAAA,EAAD,CAAQxB,QAxFpB,WACIgK,OAAOC,SAASC,QAAO,IAuFf,gCC9TDC,OAXf,WACE,OACE,gCACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAACzK,UAAU,gCAA3B,SACE,oBAAIM,MAAO,CAACE,MAAO,SAAnB,2BAEA,cAAC,GAAD,QCAOkK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.994230dd.chunk.js","sourcesContent":["import BlankDice from \"../../assets/BlankDice.svg\"\nimport OneDice from \"../../assets/1Dice.svg\"\nimport TwoDice from \"../../assets/2Dice.svg\"\nimport ThreeDice from \"../../assets/3Dice.svg\"\nimport FourDice from \"../../assets/4Dice.svg\"\nimport FiveDice from \"../../assets/5Dice.svg\"\nimport SixDice from \"../../assets/6Dice.svg\"\n\nconst Dices = {\n    BlankDice: BlankDice,\n    OneDice: OneDice,\n    TwoDice: TwoDice,\n    ThreeDice: ThreeDice,\n    FourDice: FourDice,\n    FiveDice: FiveDice,\n    SixDice: SixDice\n}\n\nexport default Dices","export default __webpack_public_path__ + \"static/media/BlankDice.c9a23931.svg\";","export default __webpack_public_path__ + \"static/media/1Dice.4317f750.svg\";","export default __webpack_public_path__ + \"static/media/2Dice.ecbbdad5.svg\";","export default __webpack_public_path__ + \"static/media/3Dice.60f30f07.svg\";","export default __webpack_public_path__ + \"static/media/4Dice.fea982a2.svg\";","export default __webpack_public_path__ + \"static/media/5Dice.51fc3d70.svg\";","export default __webpack_public_path__ + \"static/media/6Dice.6d064eb7.svg\";","export const TurnState = {\n    RollDice: 1,\n    SelectDie: 2,\n    PlaceDie: 3,\n }; \n\nexport const Color = {\n   White: \"White\",\n   Yellow: \"Yellow\",\n   Blue: \"Blue\",\n   Green: \"Green\",\n   Orange: \"Orange\",\n   Purple: \"Purple\"\n\n}","import React from \"react\";\nimport DiceShortCut from \"../../components/DiceShortCut\";\nimport {TurnState} from \"../types\";\n\n\nfunction DiceElement(props){\n\n    function getDiceImage(){\n        \n            switch(props.dice.number){\n                case 1: return DiceShortCut.OneDice\n                case 2: return DiceShortCut.TwoDice\n                case 3: return DiceShortCut.ThreeDice\n                case 4: return DiceShortCut.FourDice\n                case 5: return DiceShortCut.FiveDice\n                case 6: return DiceShortCut.SixDice\n                    default: return \"\"\n    \n            }\n        \n        \n    }\n\n    return (\n        <>\n        {\n        \n        <img \n        src={getDiceImage()} \n        alt={`${props.dice.number} dice`} \n        className={`dice ${props.dice.markedForPlatter ? 'markForPlatter' : 'diceBorder'}  ${props.turnState === TurnState.SelectDie ? 'selectedPulse' : \"\"} ${props.disabledClick ? 'nonSelectable' : ''}`} \n        onClick={() => props.onDiceSelect(props.dice)} \n        style={{backgroundColor: props.dice.color}} />\n           }\n                \n\n        </>\n    )\n}\n\nexport default DiceElement","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport DiceShortCut from \"../DiceShortCut\";\nimport DiceElement from \"../../helperfunctions/dice\"\n\n\nfunction KeptDice(props){\n\n\n\n    return (\n        <>\n           \n            <Row>\n                {[...Array(3)].map((item, index) => {\n                    return (\n                        <Col key={index}>\n                            {props.selectedDice.length > index\n                                ?\n                                <DiceElement dice={props.selectedDice[index]}/>\n                                : <div className=\"gameSquare\" style={{ backgroundColor: \"white\" }}>{}</div>\n\n                            }\n\n                        </Col>\n                    )\n\n                })\n                }\n            </Row>\n            \n\n        </>\n    )\n}\n\nexport default KeptDice\n","import React from \"react\";\nimport Dice from \"../../helperfunctions/dice\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nfunction DiceSet(props){\n\n    let dices = props.availableDices\n        \n    return (\n        <>\n           \n            <Row>\n                {dices.map((item, index) =>\n                    \n                    <Col key={index}>\n                        <Dice turnState={props.turnState} onDiceSelect={props.onDiceSelect} dice={item}/>\n                    </Col>\n\n                    )}\n                </Row>\n            \n        </>\n    )\n}\n\nexport default DiceSet","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceSet from \"../DiceSet\";\nimport Button from \"react-bootstrap/Button\"\nimport {TurnState} from \"../../helperfunctions/types\"\n\nfunction DiceRoller(props){\n    \n    const canRoll = () => {\n        return(props.availableDices.length > 0 && props.rollNumber < 3)\n    }\n\n    return(\n        <>\n            \n            <Card style={{width: \"18rem\"}}>\n                <Card.Body>\n                    <Card.Title className=\"d-flex justify-content-center\">How Clever Are You?</Card.Title>\n                        <DiceSet turnState={props.turnState} availableDices={props.availableDices} onDiceSelect={props.onDiceSelect} />\n                    <div className=\"d-flex justify-content-center\">\n                        <Button \n                        disabled={props.turnState !== TurnState.RollDice} \n                        className={`mt-2 ${props.turnState === TurnState.RollDice ? \"selectedPulse\" : \"\"}`} \n                        onClick={canRoll() ? props.onRoll  : props.onDiceReset}>{canRoll() ? \"Roll Dice\"  : \"Reset Dice\"}</Button>\n                    </div>\n\n                </Card.Body>\n            </Card>\n                        \n\n        </>\n    )\n}\n\nexport default DiceRoller\n\n","import {TurnState} from \"../helperfunctions/types\"\n\nexport const YellowChoices = [3, 6, 5, \"X\", 2, 1, \"X\", 5, 1, \"X\", 2, 4, \"X\", 3, 4, 6];\nexport const BlueChoices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nexport const GreenSquares = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]\nexport const OrangeSquares = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nexport const PurpleSquares = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n\nexport const CanSelectDice = (dice, blue, white, playerState) =>{\n    return (CanSelectYellowDice(dice, playerState.yellowState)\n    || CanSelectBlueDice(dice, blue, white, playerState.blueState) \n    || CanSelectGreenDice(dice, playerState.greenState)\n    || CanSelectOrangeDice(dice, playerState.orangeState)\n    || CanSelectPurpleDice(dice, playerState.purpleState)\n    )\n}\n\nexport const CanPlaceYellowDice = (item, turnState, dice) => {\n    return (turnState === TurnState.PlaceDie \n        &&  DoesYellowDiceMatch(item, dice)\n        ) \n}\n\nconst CanSelectYellowDice = (dice, yellowState) => {\n    for(let i = 0; i < YellowChoices.length; i++){\n        if(DoesYellowDiceMatch(YellowChoices[i], dice) && yellowState[i] === undefined){\n            return true\n        }\n    }\n\n    return false\n}\n\nconst DoesYellowDiceMatch = (item, dice) => {\n    return(dice.number === item \n        && (dice.color === \"Yellow\" || dice.color === \"White\"))\n}\n\n\nexport const CanPlaceBlueDice = (item, dice, blue, white, turnState) => {\n    return (turnState === TurnState.PlaceDie \n        && DoesBlueDiceMatch(item, dice, blue, white)\n        ) \n}\n\nconst CanSelectBlueDice = (dice, blue, white, blueState) => {\n    for(let i = 0; i < BlueChoices.length; i++){\n        if(DoesBlueDiceMatch(BlueChoices[i], dice, blue, white) && blueState[i] === undefined){\n            return true\n        }\n    }\n\n    return false\n}\n\nconst DoesBlueDiceMatch = (item, dice, blue, white) => {\n    return (blue.number + white.number === item \n        && (dice.color === \"Blue\" || dice.color === \"White\"))\n}\n\nexport const CanPlaceGreenDice = (item, dice, turnState, greenState, index) => {\n    let nextIndex = greenState.length\n    return (turnState === TurnState.PlaceDie\n        && index === nextIndex \n        && DoesGreenDiceMatch(item, dice)\n        ) \n}\n\nconst CanSelectGreenDice = (dice, greenState) => {\n        let nextIndex = greenState.length\n        if(nextIndex < GreenSquares.length && DoesGreenDiceMatch(GreenSquares[nextIndex], dice)){\n            return true\n        }\n    \n\n    return false\n}\n\nconst DoesGreenDiceMatch = (item, dice) => {\n    return (dice.color === \"Green\" || dice.color === \"White\")\n    && (dice.number >= item)\n}\n\nexport const CanPlaceOrangeDice = (dice, turnState, orangeState, index) => {\n    let nextIndex = orangeState.length\n    return (turnState === TurnState.PlaceDie \n        && index === nextIndex \n        && DoesOrangeDiceMatch(dice)\n        ) \n}\n\nconst CanSelectOrangeDice = (dice, orangeState) => {\n        let nextIndex = orangeState.length\n        if(nextIndex < OrangeSquares.length && DoesOrangeDiceMatch(dice)){\n            return true\n        }\n    return false\n}\n\nconst DoesOrangeDiceMatch = (dice) => {\n    return (dice.color === \"Orange\" || dice.color === \"White\")\n}\n\n\nexport const CanPlacePurpleDice = (dice, turnState, purpleState, index) => {\n    let nextIndex = purpleState.length\n    return (turnState === TurnState.PlaceDie \n        && index === nextIndex \n        && DoesPurpleDiceMatch(dice, purpleState)\n        ) \n}\n\nconst CanSelectPurpleDice = (dice, purpleState) => {\n        let nextIndex = purpleState.length\n        if(nextIndex < PurpleSquares.length && DoesPurpleDiceMatch(dice, purpleState)){\n            return true\n        }\n    return false\n}\n\nconst DoesPurpleDiceMatch = (dice, purpleState) => {\n    return (dice.color === \"Purple\" || dice.color === \"White\") \n    && (purpleState.length === 0\n    || dice.number > purpleState[purpleState.length -1].number\n    || purpleState[purpleState.length -1].number === 6)\n}\n\n\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport {CanPlaceYellowDice, YellowChoices} from \"../../helperfunctions/CheckDice\"\n\n\nfunction YellowField(props){\n\n    \n\n    const handleClick = (item, index) => {\n\n\n        if(CanPlaceYellowDice(item, props.turnState, props.lastSelectedDice)){\n            let setColorOfDice = {...props.lastSelectedDice};\n            setColorOfDice.color = \"Yellow\";\n            setColorOfDice.isPlaced = true;\n            props.state[index] = setColorOfDice;\n            props.onDicePlaced(props.lastSelectedDice, \"Yellow\");\n        }\n    }\n\n    return(\n        \n            <Container onClick={props.onClick} className=\"mt-3\">\n                <Card style={{width: \"25rem\", borderColor: \"#ffd900\", borderWidth: \"3px\"}}>\n                    <Row>\n                        {YellowChoices.map((item, index) =>{\n                            return(\n                            <Col xs={3} sm={3} md={3} lg={3} xl={3} xxl={3} key={index}>\n                               \n                               {\n                                props.state.length > index && props.state[index]\n                                ?  <DiceElement disabledClick={true} dice={props.state[index]} />\n                                : <div\n                                onClick={() => handleClick(item, index)} \n                                style={{fontSize: \"2rem\"}} \n                                className={`gameSquare d-flex justify-content-center ${CanPlaceYellowDice(item, props.turnState, props.lastSelectedDice) ? \"selectedPulse yellowBorder\" : \"\"}`}>\n                                {item}\n                               </div>  \n                                \n                                  \n                               }\n\n                            </Col>\n                            )\n                        })}\n                    </Row>\n                </Card>\n            </Container>\n       \n    )\n}\n\nexport default YellowField\n\n","export default __webpack_public_path__ + \"static/media/BlueWhiteCombo.e12a8c30.svg\";","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport BlueWhite from \"../../assets/BlueWhiteCombo.svg\";\nimport {CanPlaceBlueDice, BlueChoices} from \"../../helperfunctions/CheckDice\"\n\nfunction BlueField(props){\n\n\n    const handleClick = (item, index, props) => {\n\n        if(CanPlaceBlueDice(item, props.lastSelectedDice, props.blueDice, props.whiteDice, props.turnState)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Blue\"\n            setColorOfDice.index = index\n            props.state[index] = setColorOfDice\n            props.onDicePlaced(props.lastSelectedDice, \"Blue\")\n        }\n    }\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{width: \"25rem\", height: \"15rem\", borderColor: \"#0af\", borderWidth: \"3px\"}}>\n                    <Row>\n                        {BlueChoices.map((item, index) =>{\n                            return(\n                            <Col xs={3} sm={3} md={3} lg={3} xl={3} xxl={3} key={item}>\n                               {\n                                item === 1 \n                                ? <img alt=\"blue and white dice only in this field\" src={BlueWhite} />\n                                \n                          \n\n                                :  props.state.length > index && props.state[index]\n                                ?  <div className=\"gameSquare d-flex justify-content-center\" style={{backgroundColor: \"blue\", color: \"white\", fontSize:\"2rem\"}}>{item}</div>\n                                : <div onClick={() => handleClick(item, index, props)} style={{fontSize: \"2rem\"}} className={`gameSquare d-flex justify-content-center ${CanPlaceBlueDice(item, props.lastSelectedDice, props.blueDice, props.whiteDice, props.turnState) ? \"selectedPulse blueBorder\" : \"\"}`}>\n                                {item}\n                               </div> \n                               \n                               }\n                                \n                                \n                            </Col>\n                            )\n                        })}\n                    </Row>\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default BlueField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport {CanPlaceGreenDice, GreenSquares} from \"../../helperfunctions/CheckDice\"\n\nfunction GreenField(props){\n\n    const handleClick = (item, index, props) => {\n        if(CanPlaceGreenDice(item, props.lastSelectedDice, props.turnState, props.state, index)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Green\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Green\")\n        }\n    }\n\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{borderColor: \"green\", borderWidth: \"3px\"}}>\n                    <Row>\n                        <Col className=\"d-flex justify-content-evenly\">                        \n                            {GreenSquares.map((item, index) => {\n                                return(\n                                   <div key={index}>\n                                    {\n                                        props.state.length > index\n                                        ? <DiceElement disabledClick={true} dice={props.state[index]} />\n                                    : <div onClick={() => handleClick(item, index, props)} style={{fontSize: \"2rem\"}} className={`gameSquare d-inline-block ${CanPlaceGreenDice(item, props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse greenBorder\" : \"\"}`}>{item}<span>≥</span></div>\n                                        }\n                                    \n                                    </div>\n                                   \n                                )\n                            })}\n                        </Col>\n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default GreenField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\"; \nimport {CanPlaceOrangeDice, OrangeSquares} from \"../../helperfunctions/CheckDice\"\n\nfunction OrangeField(props){\n    \n    \n\n    const handleClick = (index) => {\n        if(CanPlaceOrangeDice(props.lastSelectedDice, props.turnState, props.state, index)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Orange\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Orange\", index)\n        }\n    }\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{borderColor: \"orange\", borderWidth: \"3px\"}}>\n                    <Row>\n                        <Col className=\"d-flex justify-content-evenly\">                        \n                            {OrangeSquares.map((item, index) => {\n                                return(\n                                   <div key={index}>\n                                       {\n                                        props.state.length > index\n                                        ? <DiceElement disabledClick={true} dice={props.state[index]}/>\n                                        : <div\n                                            onClick={() => handleClick(index)} \n                                            className={`gameSquare d-inline-block ${CanPlaceOrangeDice(props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse orangeBorder\" : \"\"}`}\n                                            style={{textAlign: \"center\", fontSize: \"2rem\", color: \"orange\", fontWeight: \"bold\"}} >\n                                                {\n                                                index === 3 ? \"x2\"\n                                                : index === 6 ? \"x2\"\n                                                : index === 8 ? \"x2\"\n                                                : index === 10 ? \"x3\" : \"\" } \n                                            </div>\n                                        }\n                                    </div>\n                                   \n                                )\n                            })}\n                        </Col>\n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default OrangeField","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport DiceElement from \"../../helperfunctions/dice\";\nimport {CanPlacePurpleDice, PurpleSquares} from \"../../helperfunctions/CheckDice\"\n\nfunction PurpleField(props){\n\n    \n\n\n    const handleClick = (index) => {\n        if(CanPlacePurpleDice(props.lastSelectedDice, props.turnState, props.state, index)){\n            let setColorOfDice = {...props.lastSelectedDice}\n            setColorOfDice.color = \"Purple\"\n            props.state.push(setColorOfDice)\n            props.onDicePlaced(props.lastSelectedDice, \"Purple\")\n        }\n    }\n\n    return(\n        <>\n            <Container className=\"mt-3\">\n                <Card style={{borderColor: \"purple\", borderWidth: \"3px\"}}>\n                    <Row>\n                        <Col className=\"d-flex justify-content-evenly\">                        \n                            {PurpleSquares.map((item, index) => {\n                                return(\n                                   <div key={item}>\n                                    {\n                                        props.state.length > index\n                                        ? <DiceElement disabledClick={true} dice={props.state[index]}/>\n                                        : <div onClick={() => handleClick(index)} style={{fontSize: \"2rem\", textAlign: \"center\"}} className={`gameSquare d-inline-block ${CanPlacePurpleDice(props.lastSelectedDice, props.turnState, props.state, index) ? \"selectedPulse purpleBorder\" : \"\"}`}>{item === 1 ? \"\" :  <span>></span>}</div>\n                                   }\n                                        \n                                    \n                                    </div>\n                                    \n                                   \n                                )\n                                \n                            })}\n                            \n                        </Col>\n\n                    </Row>\n\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default PurpleField","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport DiceShortCut from \"../../components/DiceShortCut\";\n\nfunction LeftOverField(props){\n\n    function getDiceImage(number){\n        switch(number){\n            case 1: return DiceShortCut.OneDice\n            case 2: return DiceShortCut.TwoDice\n            case 3: return DiceShortCut.ThreeDice\n            case 4: return DiceShortCut.FourDice\n            case 5: return DiceShortCut.FiveDice\n            case 6: return DiceShortCut.SixDice\n                default: return \"\"\n\n        }\n    }\n    \n\n    return (\n        <>\n\n        <Card style={{width: \"18rem\"}}>\n\n            <Card.Body>\n                <Card.Title>\n                    Left Overs:\n                </Card.Title>\n                <Row>\n                        {[...Array(5)].map((item, index) => {\n                            return (\n                                <Col key={index}>\n                                    {props.leftOverDice.length > index\n                                        ?\n                                        <img src={getDiceImage(props.leftOverDice[index].number)} alt={`${props.leftOverDice[index].number} dice`} className=\"dice\" style={{backgroundColor: props.leftOverDice[index].color}} /> \n                                        : <div className=\"gameSquare\" style={{ backgroundColor: \"white\" }}>{}</div>\n\n                                    }\n\n                                </Col>\n                            )\n\n                        })\n                        }\n                    </Row>\n\n            </Card.Body>\n        </Card>\n\n\n           \n                \n\n        </>\n    )\n}\n\nexport default LeftOverField","const PlayerState = {\n    yellowState: [],\n    blueState: [],\n    greenState: [],\n    orangeState: [],\n    purpleState: [],\n\n}\n\nexport default PlayerState","import PlayerState from \"../models/playerModel\"\n\n//the following is a map of the ies for the yellow field that needs to be met for points\n//0,4,8 (10) | 1,5,13 (14)| 2,10,14 (16)| 7,11,15 (20)\n\nconst YellowScore = (yellowState) => {\n    let tempYellowScore = 0;\n    if(\n        yellowState[0] !== undefined \n        && yellowState[4] !== undefined\n        && yellowState[8] !== undefined ){\n            tempYellowScore += 10\n        } \n    if (\n            yellowState[1] !== undefined \n            && yellowState[5] !== undefined\n            && yellowState[13] !== undefined\n        ) {\n            tempYellowScore += 14\n        } \n   if(\n            yellowState[2] !== undefined \n            && yellowState[10] !== undefined\n            && yellowState[14] !== undefined\n        ){\n            tempYellowScore += 16\n        } \n        \n    if(\n            yellowState[7] !== undefined \n            && yellowState[11] !== undefined\n            && yellowState[15] !== undefined\n        ){\n            tempYellowScore += 20\n        } \n\n    console.log(\"yellow\", tempYellowScore)\n    return tempYellowScore\n}\n\n\n\n\nconst BlueScore = (blueState) => {\n    let count = 0\n    for(let i = 0; i < blueState.length; i++){\n        if(blueState[i] !== undefined){\n            count++\n        }\n    }\n    \n    //Blue: 1:1 2:2 3:4 4:7 5:11 6:16 7:22 8:29 9:37 10:46 11:56\n    // Follows triangular sequence. Increment by 1 since we aren't starting at i 0.\n    \n    \n    if(count === 0){\n        return 0\n    } else{\n        const n = count - 1;\n        console.log(\"blue\", (n * (n +1 ) / 2) + 1)\n    return ((n * (n+1)) / 2) + 1;}\n}\n\nconst GreenScore = (greenState) => {\n    let count = 0\n    for(let i = 0; i < greenState.length; i++){\n        if(i !== undefined){\n            count++\n        }\n    }\n    \n    //Green: 1:1 2:3 3:6 4:10 5:15 6:21 7:28 8:36 9:45 10:55 11:66\n    //Follows triangular sequence.\n\n    console.log(\"green\", count * (count +1 ) / 2)\n    \n    return (count * (count +1 ) / 2)\n\n}\n\nconst OrangeScore = (orangeState) =>{\n\n    \n    let tempOrangeScore = 0;\n\n    for(let i = 0; i < orangeState.length; i++){\n        if(orangeState[i] === undefined){\n            break\n        }\n        if(i === 3 || i === 6 || i === 8){\n            tempOrangeScore += orangeState[i].number * 2\n        } else if(i === 10){\n            tempOrangeScore += orangeState[i].number * 3\n        } else {\n            tempOrangeScore += orangeState[i].number\n        }\n    }\n\n    console.log(\"orange\", tempOrangeScore)\n\n    return tempOrangeScore;\n    \n}\n\nconst PurpleScore = (purpleScore) => {\n    \n    let tempPurpleScore = 0;\n\n    for(let i = 0; i < purpleScore.length; i++){\n        if(purpleScore[i] === undefined){\n            break;\n        }\n        tempPurpleScore += purpleScore[i].number\n    }\n\n    console.log(\"purple\", tempPurpleScore)\n\n    return tempPurpleScore;\n}\n\nexport const CalculateScore = (playerState) =>{\n    return(\n        YellowScore(playerState.yellowState) + \n        BlueScore(playerState.blueState) + \n        GreenScore(playerState.greenState) + \n        OrangeScore(playerState.orangeState) + \n        PurpleScore(playerState.purpleState))\n}","import React, {useState, useEffect} from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport KeptDice from \"../KeptDice\";\nimport DiceRoller from \"../DiceRoller\"\nimport YellowField from \"../YellowField\";\nimport BlueField from \"../BlueField\";\nimport GreenField from \"../GreenField\"\nimport OrangeField from \"../OrangeField\"\nimport PurpleField from \"../PurpleField\";\nimport LeftOverField from \"../LeftOverField/leftoverfield.js\";\nimport {TurnState, Color} from \"../../helperfunctions/types\";\nimport PlayerState from \"../../models/playerModel\";\nimport {CanSelectDice} from \"../../helperfunctions/CheckDice\";\nimport {CalculateScore} from \"../../helperfunctions/FieldScores\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction GameCard(){   \n\n    const [turnState, setTurnState] = useState(TurnState.RollDice)\n    const [availableDices, setAvailableDices] = useState([]) \n    const [selectedDice, setSelectedDice] = useState([])\n    const [leftOverDice, setLeftOverDice] = useState([])\n    const [playerState, setPlayerState] = useState(PlayerState)\n    const [wildDice, setWildDice] = useState()\n    const [blueDice, setBlueDice] = useState()\n    const [confirmDiceChoice, setConfirmDiceChoice] = useState()\n    const [rollNumber, setRollNumber] = useState(0)\n    const [round, setRound] = useState(0)\n    const [playerScore, setPlayerScore] = useState(0)\n    const [thisGamesRounds, setThisGamesRounds] = useState()\n    \n    \n\n    function onDiceRoll(){\n        if(turnState !== TurnState.RollDice){\n            return\n        }\n\n        setRollNumber(prevRollNumber => prevRollNumber + 1)\n\n        newDice()\n        setTurnState(TurnState.SelectDie)\n    }\n\n    function onDiceConfirm(){\n        let updatedSelectedDice = [...selectedDice]\n        updatedSelectedDice.push(confirmDiceChoice)\n        setSelectedDice(updatedSelectedDice)\n        let updatedAvailableDices = availableDices.filter(d => d.color !== confirmDiceChoice.color)\n\n\n        setAvailableDices(updatedAvailableDices)\n\n        let actionState = 1\n\n        moveDiceToPlatter(confirmDiceChoice, updatedAvailableDices, actionState)\n        \n        setTurnState(TurnState.RollDice)\n        setConfirmDiceChoice(undefined)\n    }\n\n    function onDiceReject(){\n        setConfirmDiceChoice(undefined)\n    }\n\n    function onDiceSelect(dice){\n\n        // TODO: Consolidate duplicate code between SelectDie and PlaceDie\n\n        if(turnState === TurnState.SelectDie){\n            \n            if(CanSelectDice(dice, blueDice, wildDice, playerState)){\n\n                let updatedSelectedDice = [...selectedDice]\n                    \n                updatedSelectedDice.push(dice)\n\n                setSelectedDice(updatedSelectedDice)\n                let updatedAvailableDices = availableDices.filter(d => d.color !== dice.color)\n\n                setAvailableDices(updatedAvailableDices)\n\n                markDiceForPlatter(dice, updatedAvailableDices)\n                \n                setTurnState(TurnState.PlaceDie)\n            } else{\n                setConfirmDiceChoice(dice)\n                \n            }\n            \n            \n        } else if (turnState === TurnState.PlaceDie){\n                //this means the player is swapping out the last chosen die for a different die\n                \n                // Undo previous selected die\n                let previousDie = selectedDice[selectedDice.length - 1]\n                let tempSelectedDie = selectedDice.filter(d => d.color !== previousDie.color)\n\n                //the selected dice can never be marked for platter\n                dice.markedForPlatter = false;\n\n\n                // Select the new die instead\n                if(CanSelectDice(dice, blueDice, wildDice, playerState)){\n                    tempSelectedDie.push(dice)\n\n\n                    setSelectedDice(tempSelectedDie)\n\n                    let tempAvailableDice = availableDices.filter(d => d.color !== dice.color)\n                    tempAvailableDice.push(previousDie)\n\n\n                    setAvailableDices(tempAvailableDice)                \n\n                    \n                    markDiceForPlatter(dice, tempAvailableDice)\n                } else{\n                    setConfirmDiceChoice(dice)\n                    \n                }\n\n        }\n\n       \n    }\n\n    function markDiceForPlatter(newSelectedDice, newAvailableDice){\n\n        let tempAvailableDice = [...newAvailableDice]\n        \n        let count = 0\n\n        for(let i = 0; i < tempAvailableDice.length; i++){\n           \n            if(newSelectedDice.number > tempAvailableDice[i].number){\n                tempAvailableDice[i].markedForPlatter = true\n                count++\n            } else {\n                tempAvailableDice[i].markedForPlatter = false\n            }\n            \n        }\n\n        \n        if(count > 0){\n            toast(\"Just be aware that the dice in red will be moved \" +\n            \"to the left over pile. You can still select these dice as \" +\n            \"your choice if you want. Just make sure to make the \" +\n            \"most clever choice.\")\n        }\n      \n\n        setAvailableDices(tempAvailableDice)\n    }\n\n    function moveDiceToPlatter(selectedDice, newAvailableDice){\n\n        //here I am seeing if the selected dice(s) have a number that is greater than the ones still available [X]Done\n                //if so then I am disabling the available dice which will be placed in the left over pile for other players to use. [X]Done\n                //note: the current player should be able to take a dice out of the leftover pile when they are on this step but the leftover \n                    //dice should be locked once the player moves past this step. []Done\n        \n        \n        let newLeftOverDice = [...leftOverDice];\n\n        \n        for(let i = 0; i < newAvailableDice.length; i++){\n           \n                if(selectedDice.number > newAvailableDice[i].number){\n                    newLeftOverDice.push(newAvailableDice[i]);\n                }\n                \n            }\n        \n        \n            \n        setLeftOverDice(newLeftOverDice);\n\n        let tempAvailableDice = [...newAvailableDice];\n        \n        tempAvailableDice = tempAvailableDice.filter(d => !newLeftOverDice.includes(d)) \n\n        setAvailableDices(tempAvailableDice)\n        \n    }\n\n\n    function newDice(){\n        let tempArr = []\n       \n        for(let i=0; i < availableDices.length; i++){\n            let die = availableDices[i]\n            die.number = Math.floor(Math.random() * 6) + 1\n            tempArr.push(die)\n            if(die.color === \"White\"){\n                setWildDice(die)\n            } else if(die.color === \"Blue\"){\n                setBlueDice(die)\n            }\n\n           \n        }\n\n        setAvailableDices(tempArr)\n        \n    }\n\n\n    const handleDicePlace = (dice, field, index) => {\n        \n        setPlayerScore(CalculateScore(playerState))\n        moveDiceToPlatter(dice, availableDices)\n\n        setTurnState(TurnState.RollDice)\n        \n    }\n\n\n    const diceReset = () => {\n\n     \n        setRollNumber(0)\n        setRound(prevRound => prevRound + 1)\n        \n\n        setLeftOverDice([])\n        setSelectedDice([])\n\n        const availableColors = [Color.White, Color.Yellow, Color.Blue, Color.Green, Color.Orange, Color.Purple]\n        let tempArr = []\n        for(let i = 0; i < availableColors.length; i++){\n            tempArr.push({\n                color: availableColors[i],\n                number: Math.floor(Math.random() * 6) + 1,\n            })\n        }\n        setAvailableDices(tempArr)\n    }\n\n    function resetGame(){\n        window.location.reload(false)\n    }\n\n    function initRounds(){\n        setThisGamesRounds(6)\n    }\n\n    useEffect(()=>{\n        initRounds()\n        diceReset()\n        \n    }, [])\n   \n    return (\n        <>\n            <ToastContainer\n                position=\"top-right\"\n                autoClose={5000}\n                pauseOnHover\n                closeOnClick\n            />   \n            <Container className=\"d-flex justify-content-center mt-5\" >\n                <Card style={{background: \"rgba(255, 255, 255, 0.25)\"}} >\n\n                <Row>\n                    <Col>\n                        <Card.Title style={{color: \"white\"}}>Score: {playerScore}</Card.Title>\n                        <Card.Title style={{color: \"white\"}}>Round: {round} / {thisGamesRounds}</Card.Title>\n                    </Col>\n                </Row>\n                \n                <Row className=\"mt-5 mb-5\">\n                   \n                    <Col xs={6} sm={6} md={6} lg={6} xl={6} xxl={6} className=\"d-flex justify-content-center\" >\n                                <KeptDice selectedDice={selectedDice} />\n                                <DiceRoller turnState={turnState} onRoll={onDiceRoll} onDiceReset={diceReset} rollNumber={rollNumber} round={round} availableDices={availableDices} onDiceSelect={onDiceSelect} />\n                    </Col>\n                    \n\n                    <Col xs={6} sm={6} md={6} lg={6} xl={6} xxl={6} className=\"d-flex justify-content-center\">\n                                <LeftOverField leftOverDice={leftOverDice} />\n                    </Col>\n\n                    <Col xs={6} sm={6} md={6} lg={6} xl={6} xxl={6}>\n                                <YellowField turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length -1]} state={playerState.yellowState} onDicePlaced={handleDicePlace}/>\n                    </Col>\n\n                    <Col xs={6} sm={6} md={6} lg={6} xl={6} xxl={6}>\n                    \n                                <BlueField whiteDice={wildDice} blueDice={blueDice} turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length -1]} state={playerState.blueState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n                    \n                                <GreenField turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length -1]} state={playerState.greenState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n                    \n                                <OrangeField turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length -1]} state={playerState.orangeState} onDicePlaced={handleDicePlace} />\n                    </Col>\n                    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>\n                    \n                                <PurpleField turnState={turnState} lastSelectedDice={selectedDice[selectedDice.length -1]} state={playerState.purpleState} onDicePlaced={handleDicePlace}/>\n                    </Col>\n\n                </Row>\n                </Card>\n            </Container>\n\n            <Modal show={confirmDiceChoice !== undefined} onHide={() => onDiceReject()}>\n            {/* <Modal show={confirmDiceChoice !== undefined} onHide={() => console.log()}> */}\n                <Modal.Body>\n\n                    Do you want to select this dice? There is no place to put it\n                </Modal.Body>\n                <Button onClick={() => onDiceConfirm()}>\n                    Yes\n                </Button>\n                <Button onClick={() => onDiceReject()}>\n                    No\n                </Button>\n                </Modal>\n\n            <Modal show={round > thisGamesRounds} > \n                    <Modal.Title>Game Over</Modal.Title>\n                <Modal.Body>\n                    Great Game! You scored: {playerScore}\n                </Modal.Body>\n                <Button onClick={resetGame}>Play Again!</Button>\n            </Modal>\n        \n        </>\n    )\n}\n\nexport default GameCard","import './App.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport GameCard from \"./components/GameCard\"\n\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron fluid className=\"d-flex justify-content-center\">\n        <h1 style={{color: \"white\"}}>Clever Game</h1>\n      </Jumbotron>\n        <GameCard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}